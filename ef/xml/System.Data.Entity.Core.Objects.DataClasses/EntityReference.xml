<Type Name="EntityReference" FullName="System.Data.Entity.Core.Objects.DataClasses.EntityReference">
  <TypeSignature Language="C#" Value="public abstract class EntityReference : System.Data.Entity.Core.Objects.DataClasses.RelatedEnd" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit EntityReference extends System.Data.Entity.Core.Objects.DataClasses.RelatedEnd" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EntityReference&#xA;Inherits RelatedEnd" />
  <TypeSignature Language="F#" Value="type EntityReference = class&#xA;    inherit RelatedEnd" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Entity.Core.Objects.DataClasses.RelatedEnd</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.DataContract</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Models a relationship end with multiplicity 1.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="EntityKey">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Core.EntityKey EntityKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Entity.Core.EntityKey EntityKey" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference.EntityKey" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityKey As EntityKey" />
      <MemberSignature Language="F#" Value="member this.EntityKey : System.Data.Entity.Core.EntityKey with get, set" Usage="System.Data.Entity.Core.Objects.DataClasses.EntityReference.EntityKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.DataMember</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.EntityKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the key for the related object. </summary>
        <value>
            An <see cref="T:System.Data.Entity.Core.EntityKey" /> that is the key of the related object.
            </value>
        <remarks>
            Returns the EntityKey of the target entity associated with this EntityReference.
            Is non-null in the following scenarios:
            (a) Entities are tracked by a context and an Unchanged or Added client-side relationships exists for this EntityReference's owner with the
            same RelationshipName and source role. This relationship could have been created explicitly by the user (e.g. by setting
            the EntityReference.Value, setting this property directly, or by calling EntityCollection.Add) or automatically through span queries.
            (b) If the EntityKey was non-null before detaching an entity from the context, it will still be non-null after detaching, until any operation
            occurs that would set it to null, as described below.
            (c) Entities are detached and the EntityKey is explicitly set to non-null by the user.
            (d) Entity graph was created using a NoTracking query with full span
            Is null in the following scenarios:
            (a) Entities are tracked by a context but there is no Unchanged or Added client-side relationship for this EntityReference's owner with the
            same RelationshipName and source role.
            (b) Entities are tracked by a context and a relationship exists, but the target entity has a temporary key (i.e. it is Added) or the key
            is one of the special keys
            (c) Entities are detached and the relationship was explicitly created by the user.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>