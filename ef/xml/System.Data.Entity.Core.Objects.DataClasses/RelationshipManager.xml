<Type Name="RelationshipManager" FullName="System.Data.Entity.Core.Objects.DataClasses.RelationshipManager">
  <TypeSignature Language="C#" Value="public class RelationshipManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RelationshipManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />
  <TypeSignature Language="VB.NET" Value="Public Class RelationshipManager" />
  <TypeSignature Language="F#" Value="type RelationshipManager = class" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Container for the lazily created relationship navigation
            property objects (collections and refs).
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Data.Entity.Core.Objects.DataClasses.RelationshipManager Create (System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships owner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Entity.Core.Objects.DataClasses.RelationshipManager Create(class System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.Create(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (owner As IEntityWithRelationships) As RelationshipManager" />
      <MemberSignature Language="F#" Value="static member Create : System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships -&gt; System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" Usage="System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.Create owner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Objects.DataClasses.RelationshipManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />
      </Parameters>
      <Docs>
        <param name="owner">Reference to the entity that is calling this method.</param>
        <summary>
            Creates a new <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> object.
            </summary>
        <returns>
            The requested <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.
            </returns>
        <remarks>
            Used by data classes that support relationships. If the change tracker
            requests the RelationshipManager property and the data class does not
            already have a reference to one of these objects, it calls this method
            to create one, then saves a reference to that object. On subsequent accesses
            to that property, the data class should return the saved reference.
            The reason for using a factory method instead of a public constructor is to
            emphasize that this is not something you would normally call outside of a data class.
            By requiring that these objects are created via this method, developers should
            give more thought to the operation, and will generally only use it when
            they explicitly need to get an object of this type. It helps define the intended usage.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllRelatedEnds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd&gt; GetAllRelatedEnds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd&gt; GetAllRelatedEnds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetAllRelatedEnds" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllRelatedEnds () As IEnumerable(Of IRelatedEnd)" />
      <MemberSignature Language="F#" Value="member this.GetAllRelatedEnds : unit -&gt; seq&lt;System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd&gt;" Usage="relationshipManager.GetAllRelatedEnds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumeration of all the related ends managed by the relationship manager.</summary>
        <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of objects that implement
            <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />
            . An empty enumeration is returned when the relationships have not yet been populated.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRelatedCollection&lt;TTargetEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Core.Objects.DataClasses.EntityCollection&lt;TTargetEntity&gt; GetRelatedCollection&lt;TTargetEntity&gt; (string relationshipName, string targetRoleName) where TTargetEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1&lt;!!TTargetEntity&gt; GetRelatedCollection&lt;class TTargetEntity&gt;(string relationshipName, string targetRoleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedCollection``1(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelatedCollection(Of TTargetEntity As Class) (relationshipName As String, targetRoleName As String) As EntityCollection(Of TTargetEntity)" />
      <MemberSignature Language="F#" Value="member this.GetRelatedCollection : string * string -&gt; System.Data.Entity.Core.Objects.DataClasses.EntityCollection&lt;'argetEntity (requires 'argetEntity : null)&gt; (requires 'argetEntity : null)" Usage="relationshipManager.GetRelatedCollection (relationshipName, targetRoleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Objects.DataClasses.EntityCollection&lt;TTargetEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TTargetEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="relationshipName" Type="System.String" />
        <Parameter Name="targetRoleName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TTargetEntity">
            The type of the returned <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.
            </typeparam>
        <param name="relationshipName">Name of the relationship to navigate. The relationship name is not namespace qualified.</param>
        <param name="targetRoleName">Name of the target role for the navigation. Indicates the direction of navigation across the relationship.</param>
        <summary>
            Gets an <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> of related objects with the specified relationship name and target role name.
            </summary>
        <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> of related objects.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
            The specified role returned an <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> instead of an
            <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRelatedEnd">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd GetRelatedEnd (string relationshipName, string targetRoleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd GetRelatedEnd(string relationshipName, string targetRoleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedEnd(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelatedEnd (relationshipName As String, targetRoleName As String) As IRelatedEnd" />
      <MemberSignature Language="F#" Value="member this.GetRelatedEnd : string * string -&gt; System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" Usage="relationshipManager.GetRelatedEnd (relationshipName, targetRoleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationshipName" Type="System.String" />
        <Parameter Name="targetRoleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relationshipName">Name of the relationship in which  targetRoleName  is defined. The relationship name is not namespace qualified.</param>
        <param name="targetRoleName">Target role to use to retrieve the other end of  relationshipName .</param>
        <summary>
            Returns either an <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> or
            <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />
            of the correct type for the specified target role in a relationship.
            </summary>
        <returns>
          <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> representing the
            <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />
            or
            <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />
            that was retrieved.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"> relationshipName  or  targetRoleName  is null.</exception>
        <exception cref="T:System.InvalidOperationException">The source type does not match the type of the owner.</exception>
        <exception cref="T:System.ArgumentException"> targetRoleName  is invalid or unable to find the relationship type in the metadata.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRelatedReference&lt;TTargetEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Core.Objects.DataClasses.EntityReference&lt;TTargetEntity&gt; GetRelatedReference&lt;TTargetEntity&gt; (string relationshipName, string targetRoleName) where TTargetEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.Core.Objects.DataClasses.EntityReference`1&lt;!!TTargetEntity&gt; GetRelatedReference&lt;class TTargetEntity&gt;(string relationshipName, string targetRoleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedReference``1(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelatedReference(Of TTargetEntity As Class) (relationshipName As String, targetRoleName As String) As EntityReference(Of TTargetEntity)" />
      <MemberSignature Language="F#" Value="member this.GetRelatedReference : string * string -&gt; System.Data.Entity.Core.Objects.DataClasses.EntityReference&lt;'argetEntity (requires 'argetEntity : null)&gt; (requires 'argetEntity : null)" Usage="relationshipManager.GetRelatedReference (relationshipName, targetRoleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Objects.DataClasses.EntityReference&lt;TTargetEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TTargetEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="relationshipName" Type="System.String" />
        <Parameter Name="targetRoleName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TTargetEntity">
            The type of the returned <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.
            </typeparam>
        <param name="relationshipName">Name of the relationship to navigate. The relationship name is not namespace qualified.</param>
        <param name="targetRoleName">Name of the target role for the navigation. Indicates the direction of navigation across the relationship.</param>
        <summary>
            Gets the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> for a related object by using the specified combination of relationship name and target role name.
            </summary>
        <returns>
            The <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> of a related object.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
            The specified role returned an <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> instead of an
            <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />
            .
            </exception>
      </Docs>
    </Member>
    <Member MemberName="InitializeRelatedCollection&lt;TTargetEntity&gt;">
      <MemberSignature Language="C#" Value="public void InitializeRelatedCollection&lt;TTargetEntity&gt; (string relationshipName, string targetRoleName, System.Data.Entity.Core.Objects.DataClasses.EntityCollection&lt;TTargetEntity&gt; entityCollection) where TTargetEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InitializeRelatedCollection&lt;class TTargetEntity&gt;(string relationshipName, string targetRoleName, class System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1&lt;!!TTargetEntity&gt; entityCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedCollection``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityCollection{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InitializeRelatedCollection(Of TTargetEntity As Class) (relationshipName As String, targetRoleName As String, entityCollection As EntityCollection(Of TTargetEntity))" />
      <MemberSignature Language="F#" Value="member this.InitializeRelatedCollection : string * string * System.Data.Entity.Core.Objects.DataClasses.EntityCollection&lt;'argetEntity (requires 'argetEntity : null)&gt; -&gt; unit (requires 'argetEntity : null)" Usage="relationshipManager.InitializeRelatedCollection (relationshipName, targetRoleName, entityCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TTargetEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="relationshipName" Type="System.String" />
        <Parameter Name="targetRoleName" Type="System.String" />
        <Parameter Name="entityCollection" Type="System.Data.Entity.Core.Objects.DataClasses.EntityCollection&lt;TTargetEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TTargetEntity"> Type of the entity represented by targetRoleName </typeparam>
        <param name="relationshipName">The relationship name.</param>
        <param name="targetRoleName">The target role name.</param>
        <param name="entityCollection">An existing EntityCollection.</param>
        <summary>
            Takes an existing EntityCollection that was created with the default constructor and initializes it using the provided relationship and target role names.
            This method is designed to be used during deserialization only, and will throw an exception if the provided EntityCollection has already been initialized,
            or if the relationship manager is already attached to a ObjectContext.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeRelatedReference&lt;TTargetEntity&gt;">
      <MemberSignature Language="C#" Value="public void InitializeRelatedReference&lt;TTargetEntity&gt; (string relationshipName, string targetRoleName, System.Data.Entity.Core.Objects.DataClasses.EntityReference&lt;TTargetEntity&gt; entityReference) where TTargetEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InitializeRelatedReference&lt;class TTargetEntity&gt;(string relationshipName, string targetRoleName, class System.Data.Entity.Core.Objects.DataClasses.EntityReference`1&lt;!!TTargetEntity&gt; entityReference) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedReference``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityReference{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InitializeRelatedReference(Of TTargetEntity As Class) (relationshipName As String, targetRoleName As String, entityReference As EntityReference(Of TTargetEntity))" />
      <MemberSignature Language="F#" Value="member this.InitializeRelatedReference : string * string * System.Data.Entity.Core.Objects.DataClasses.EntityReference&lt;'argetEntity (requires 'argetEntity : null)&gt; -&gt; unit (requires 'argetEntity : null)" Usage="relationshipManager.InitializeRelatedReference (relationshipName, targetRoleName, entityReference)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TTargetEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="relationshipName" Type="System.String" />
        <Parameter Name="targetRoleName" Type="System.String" />
        <Parameter Name="entityReference" Type="System.Data.Entity.Core.Objects.DataClasses.EntityReference&lt;TTargetEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TTargetEntity">
            The type of the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> being initialized.
            </typeparam>
        <param name="relationshipName">The relationship name.</param>
        <param name="targetRoleName">The role name of the related end.</param>
        <param name="entityReference">
            The <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> to initialize.
            </param>
        <summary>
            Takes an existing EntityReference that was created with the default constructor and initializes it using the provided relationship and target role names.
            This method is designed to be used during deserialization only, and will throw an exception if the provided EntityReference has already been initialized,
            if the relationship manager already contains a relationship with this name and target role, or if the relationship manager is already attached to a ObjectContext.W
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
            When the provided <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> 
            is already initialized.-or-When the relationship manager is already attached to an
            <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />
            or when the relationship manager already contains a relationship with this name and target role.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="OnDeserialized">
      <MemberSignature Language="C#" Value="public void OnDeserialized (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnDeserialized(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnDeserialized(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnDeserialized (context As StreamingContext)" />
      <MemberSignature Language="F#" Value="member this.OnDeserialized : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="relationshipManager.OnDeserialized context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2238:ImplementSerializationMethodsCorrectly")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.OnDeserialized</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">The serialized stream.</param>
        <summary>
            Used internally to deserialize entity objects along with the
            <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />
            instances.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSerializing">
      <MemberSignature Language="C#" Value="public void OnSerializing (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OnSerializing(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnSerializing(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnSerializing (context As StreamingContext)" />
      <MemberSignature Language="F#" Value="member this.OnSerializing : System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="relationshipManager.OnSerializing context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2238:ImplementSerializationMethodsCorrectly")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Serialization.OnSerializing</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        <summary>
            Called by Object Services to prepare an <see cref="T:System.Data.Entity.Core.EntityKey" /> for binary serialization with a serialized relationship.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>