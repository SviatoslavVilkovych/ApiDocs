<Type Name="EntityTypeConfiguration&lt;TEntityType&gt;" FullName="System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt;">
  <TypeSignature Language="C#" Value="public class EntityTypeConfiguration&lt;TEntityType&gt; : System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration&lt;TEntityType&gt; where TEntityType : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EntityTypeConfiguration`1&lt;class TEntityType&gt; extends System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1&lt;!TEntityType&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />
  <TypeSignature Language="VB.NET" Value="Public Class EntityTypeConfiguration(Of TEntityType)&#xA;Inherits StructuralTypeConfiguration(Of TEntityType)" />
  <TypeSignature Language="F#" Value="type EntityTypeConfiguration&lt;'EntityType (requires 'EntityType : null)&gt; = class&#xA;    inherit StructuralTypeConfiguration&lt;'EntityType (requires 'EntityType : null)&gt;" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntityType">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration&lt;TEntityType&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TStructuralType">TEntityType</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TEntityType">The entity type being configured.</typeparam>
    <summary>
            Allows configuration to be performed for an entity type in a model.
            An EntityTypeConfiguration can be obtained via the Entity method on
            <see cref="T:System.Data.Entity.DbModelBuilder" /> or a custom type derived from EntityTypeConfiguration
            can be registered via the Configurations property on <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EntityTypeConfiguration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of EntityTypeConfiguration
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="entityTypeConfiguration.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="entityTypeConfiguration.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="entityTypeConfiguration.GetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="HasEntitySetName">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt; HasEntitySetName (string entitySetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1&lt;!TEntityType&gt; HasEntitySetName(string entitySetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasEntitySetName (entitySetName As String) As EntityTypeConfiguration(Of TEntityType)" />
      <MemberSignature Language="F#" Value="member this.HasEntitySetName : string -&gt; System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;'EntityType (requires 'EntityType : null)&gt;" Usage="entityTypeConfiguration.HasEntitySetName entitySetName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entitySetName"> The name of the entity set. </param>
        <summary>
            Configures the entity set name to be used for this entity type.
            The entity set name can only be configured for the base type in each set.
            </summary>
        <returns> The same EntityTypeConfiguration instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIndex&lt;TIndex&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.Configuration.IndexConfiguration HasIndex&lt;TIndex&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntityType,TIndex&gt;&gt; indexExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.Configuration.IndexConfiguration HasIndex&lt;TIndex&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntityType, !!TIndex&gt;&gt; indexExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasIndex``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function HasIndex(Of TIndex) (indexExpression As Expression(Of Func(Of TEntityType, TIndex))) As IndexConfiguration" />
      <MemberSignature Language="F#" Value="member this.HasIndex : System.Linq.Expressions.Expression&lt;Func&lt;'EntityType, 'Index&gt;&gt; -&gt; System.Data.Entity.ModelConfiguration.Configuration.IndexConfiguration" Usage="entityTypeConfiguration.HasIndex indexExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.IndexConfiguration</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TIndex" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="indexExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntityType,TIndex&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TIndex"> The type of the index. </typeparam>
        <param name="indexExpression"> A lambda expression representing the property to apply an index to. C#: t =&gt; t.Id VB.Net: Function(t) t.Id If the index is made up of multiple properties then specify an anonymous type including the properties. C#: t =&gt; new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 } </param>
        <summary>
            Configures index property(s) for this entity type.
            </summary>
        <returns> The IndexConfiguration instance so that the index can be further configured. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasKey&lt;TKey&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt; HasKey&lt;TKey&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntityType,TKey&gt;&gt; keyExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1&lt;!TEntityType&gt; HasKey&lt;TKey&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntityType, !!TKey&gt;&gt; keyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function HasKey(Of TKey) (keyExpression As Expression(Of Func(Of TEntityType, TKey))) As EntityTypeConfiguration(Of TEntityType)" />
      <MemberSignature Language="F#" Value="member this.HasKey : System.Linq.Expressions.Expression&lt;Func&lt;'EntityType, 'Key&gt;&gt; -&gt; System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;'EntityType (requires 'EntityType : null)&gt;" Usage="entityTypeConfiguration.HasKey keyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntityType,TKey&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"> The type of the key. </typeparam>
        <param name="keyExpression"> A lambda expression representing the property to be used as the primary key. C#: t =&gt; t.Id VB.Net: Function(t) t.Id If the primary key is made up of multiple properties then specify an anonymous type including the properties. C#: t =&gt; new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 } </param>
        <summary>
            Configures the primary key property(s) for this entity type.
            </summary>
        <returns> The same EntityTypeConfiguration instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasKey&lt;TKey&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt; HasKey&lt;TKey&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntityType,TKey&gt;&gt; keyExpression, Action&lt;System.Data.Entity.ModelConfiguration.Configuration.PrimaryKeyIndexConfiguration&gt; buildAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1&lt;!TEntityType&gt; HasKey&lt;TKey&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntityType, !!TKey&gt;&gt; keyExpression, class System.Action`1&lt;class System.Data.Entity.ModelConfiguration.Configuration.PrimaryKeyIndexConfiguration&gt; buildAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.PrimaryKeyIndexConfiguration})" />
      <MemberSignature Language="VB.NET" Value="Public Function HasKey(Of TKey) (keyExpression As Expression(Of Func(Of TEntityType, TKey)), buildAction As Action(Of PrimaryKeyIndexConfiguration)) As EntityTypeConfiguration(Of TEntityType)" />
      <MemberSignature Language="F#" Value="member this.HasKey : System.Linq.Expressions.Expression&lt;Func&lt;'EntityType, 'Key&gt;&gt; * Action&lt;System.Data.Entity.ModelConfiguration.Configuration.PrimaryKeyIndexConfiguration&gt; -&gt; System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;'EntityType (requires 'EntityType : null)&gt;" Usage="entityTypeConfiguration.HasKey (keyExpression, buildAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntityType,TKey&gt;&gt;" />
        <Parameter Name="buildAction" Type="System.Action&lt;System.Data.Entity.ModelConfiguration.Configuration.PrimaryKeyIndexConfiguration&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"> The type of the key. </typeparam>
        <param name="keyExpression"> A lambda expression representing the property to be used as the primary key. C#: t =&gt; t.Id VB.Net: Function(t) t.Id If the primary key is made up of multiple properties then specify an anonymous type including the properties. C#: t =&gt; new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 } </param>
        <param name="buildAction"> A builder to configure the key. </param>
        <summary>
            Configures the primary key property(s) for this entity type.
            </summary>
        <returns> The same EntityTypeConfiguration instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMany&lt;TTargetEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration&lt;TEntityType,TTargetEntity&gt; HasMany&lt;TTargetEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntityType,System.Collections.Generic.ICollection&lt;TTargetEntity&gt;&gt;&gt; navigationPropertyExpression) where TTargetEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2&lt;!TEntityType, !!TTargetEntity&gt; HasMany&lt;class TTargetEntity&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntityType, class System.Collections.Generic.ICollection`1&lt;!!TTargetEntity&gt;&gt;&gt; navigationPropertyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})" />
      <MemberSignature Language="VB.NET" Value="Public Function HasMany(Of TTargetEntity As Class) (navigationPropertyExpression As Expression(Of Func(Of TEntityType, ICollection(Of TTargetEntity)))) As ManyNavigationPropertyConfiguration(Of TEntityType, TTargetEntity)" />
      <MemberSignature Language="F#" Value="member this.HasMany : System.Linq.Expressions.Expression&lt;Func&lt;'EntityType, System.Collections.Generic.ICollection&lt;'argetEntity&gt;&gt;&gt; -&gt; System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration&lt;'EntityType, 'argetEntity (requires 'EntityType : null and 'argetEntity : null)&gt; (requires 'argetEntity : null)" Usage="entityTypeConfiguration.HasMany navigationPropertyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration&lt;TEntityType,TTargetEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TTargetEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationPropertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntityType,System.Collections.Generic.ICollection&lt;TTargetEntity&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TTargetEntity"> The type of the entity at the other end of the relationship. </typeparam>
        <param name="navigationPropertyExpression"> A lambda expression representing the navigation property for the relationship. C#: t =&gt; t.MyProperty VB.Net: Function(t) t.MyProperty </param>
        <summary>
            Configures a many relationship from this entity type.
            </summary>
        <returns> A configuration object that can be used to further configure the relationship. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasOptional&lt;TTargetEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration&lt;TEntityType,TTargetEntity&gt; HasOptional&lt;TTargetEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntityType,TTargetEntity&gt;&gt; navigationPropertyExpression) where TTargetEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2&lt;!TEntityType, !!TTargetEntity&gt; HasOptional&lt;class TTargetEntity&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntityType, !!TTargetEntity&gt;&gt; navigationPropertyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function HasOptional(Of TTargetEntity As Class) (navigationPropertyExpression As Expression(Of Func(Of TEntityType, TTargetEntity))) As OptionalNavigationPropertyConfiguration(Of TEntityType, TTargetEntity)" />
      <MemberSignature Language="F#" Value="member this.HasOptional : System.Linq.Expressions.Expression&lt;Func&lt;'EntityType, 'argetEntity&gt;&gt; -&gt; System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration&lt;'EntityType, 'argetEntity (requires 'EntityType : null and 'argetEntity : null)&gt; (requires 'argetEntity : null)" Usage="entityTypeConfiguration.HasOptional navigationPropertyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration&lt;TEntityType,TTargetEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TTargetEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationPropertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntityType,TTargetEntity&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TTargetEntity"> The type of the entity at the other end of the relationship. </typeparam>
        <param name="navigationPropertyExpression"> A lambda expression representing the navigation property for the relationship. C#: t =&gt; t.MyProperty VB.Net: Function(t) t.MyProperty </param>
        <summary>
            Configures an optional relationship from this entity type.
            Instances of the entity type will be able to be saved to the database without this relationship being specified.
            The foreign key in the database will be nullable.
            </summary>
        <returns> A configuration object that can be used to further configure the relationship. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRequired&lt;TTargetEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration&lt;TEntityType,TTargetEntity&gt; HasRequired&lt;TTargetEntity&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntityType,TTargetEntity&gt;&gt; navigationPropertyExpression) where TTargetEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2&lt;!TEntityType, !!TTargetEntity&gt; HasRequired&lt;class TTargetEntity&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntityType, !!TTargetEntity&gt;&gt; navigationPropertyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function HasRequired(Of TTargetEntity As Class) (navigationPropertyExpression As Expression(Of Func(Of TEntityType, TTargetEntity))) As RequiredNavigationPropertyConfiguration(Of TEntityType, TTargetEntity)" />
      <MemberSignature Language="F#" Value="member this.HasRequired : System.Linq.Expressions.Expression&lt;Func&lt;'EntityType, 'argetEntity&gt;&gt; -&gt; System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration&lt;'EntityType, 'argetEntity (requires 'EntityType : null and 'argetEntity : null)&gt; (requires 'argetEntity : null)" Usage="entityTypeConfiguration.HasRequired navigationPropertyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration&lt;TEntityType,TTargetEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TTargetEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="navigationPropertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntityType,TTargetEntity&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TTargetEntity"> The type of the entity at the other end of the relationship. </typeparam>
        <param name="navigationPropertyExpression"> A lambda expression representing the navigation property for the relationship. C#: t =&gt; t.MyProperty VB.Net: Function(t) t.MyProperty </param>
        <summary>
            Configures a required relationship from this entity type.
            Instances of the entity type will not be able to be saved to the database unless this relationship is specified.
            The foreign key in the database will be non-nullable.
            </summary>
        <returns> A configuration object that can be used to further configure the relationship. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTableAnnotation">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt; HasTableAnnotation (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1&lt;!TEntityType&gt; HasTableAnnotation(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasTableAnnotation(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasTableAnnotation (name As String, value As Object) As EntityTypeConfiguration(Of TEntityType)" />
      <MemberSignature Language="F#" Value="member this.HasTableAnnotation : string * obj -&gt; System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;'EntityType (requires 'EntityType : null)&gt;" Usage="entityTypeConfiguration.HasTableAnnotation (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">The annotation name, which must be a valid C#/EDM identifier.</param>
        <param name="value">The annotation value, which may be a string or some other type that
            can be serialized with an <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
        <summary>
            Sets an annotation in the model for the table to which this entity is mapped. The annotation
            value can later be used when processing the table such as when creating migrations.
            </summary>
        <returns>The same configuration instance so that multiple calls can be chained.</returns>
        <remarks>
            It will likely be necessary to register a <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> if the type of
            the annotation value is anything other than a string. Passing a null value clears any annotation with
            the given name on the column that had been previously set.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore&lt;TProperty&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt; Ignore&lt;TProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TEntityType,TProperty&gt;&gt; propertyExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1&lt;!TEntityType&gt; Ignore&lt;TProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TEntityType, !!TProperty&gt;&gt; propertyExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function Ignore(Of TProperty) (propertyExpression As Expression(Of Func(Of TEntityType, TProperty))) As EntityTypeConfiguration(Of TEntityType)" />
      <MemberSignature Language="F#" Value="member this.Ignore : System.Linq.Expressions.Expression&lt;Func&lt;'EntityType, 'Property&gt;&gt; -&gt; System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;'EntityType (requires 'EntityType : null)&gt;" Usage="entityTypeConfiguration.Ignore propertyExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011:ConsiderPassingBaseTypesAsParameters")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyExpression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntityType,TProperty&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TProperty"> The type of the property to be ignored. </typeparam>
        <param name="propertyExpression"> A lambda expression representing the property to be configured. C#: t =&gt; t.MyProperty VB.Net: Function(t) t.MyProperty </param>
        <summary>
            Excludes a property from the model so that it will not be mapped to the database.
            </summary>
        <returns> The same EntityTypeConfiguration instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Map">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt; Map (Action&lt;System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration&lt;TEntityType&gt;&gt; entityMappingConfigurationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1&lt;!TEntityType&gt; Map(class System.Action`1&lt;class System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1&lt;!TEntityType&gt;&gt; entityMappingConfigurationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function Map (entityMappingConfigurationAction As Action(Of EntityMappingConfiguration(Of TEntityType))) As EntityTypeConfiguration(Of TEntityType)" />
      <MemberSignature Language="F#" Value="member this.Map : Action&lt;System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration&lt;'EntityType&gt;&gt; -&gt; System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;'EntityType (requires 'EntityType : null)&gt;" Usage="entityTypeConfiguration.Map entityMappingConfigurationAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityMappingConfigurationAction" Type="System.Action&lt;System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration&lt;TEntityType&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="entityMappingConfigurationAction">
            An action that performs configuration against an
            <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />
            .
            </param>
        <summary>
            Allows advanced configuration related to how this entity type is mapped to the database schema.
            By default, any configuration will also apply to any type derived from this entity type.
            Derived types can be configured via the overload of Map that configures a derived type or
            by using an EntityTypeConfiguration for the derived type.
            The properties of an entity can be split between multiple tables using multiple Map calls.
            Calls to Map are additive, subsequent calls will not override configuration already preformed via Map.
            </summary>
        <returns> The same EntityTypeConfiguration instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Map&lt;TDerived&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt; Map&lt;TDerived&gt; (Action&lt;System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration&lt;TDerived&gt;&gt; derivedTypeMapConfigurationAction) where TDerived : class, TEntityType;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1&lt;!TEntityType&gt; Map&lt;class (!TEntityType) TDerived&gt;(class System.Action`1&lt;class System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1&lt;!!TDerived&gt;&gt; derivedTypeMapConfigurationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function Map(Of TDerived As {Class, TEntityType}) (derivedTypeMapConfigurationAction As Action(Of EntityMappingConfiguration(Of TDerived))) As EntityTypeConfiguration(Of TEntityType)" />
      <MemberSignature Language="F#" Value="member this.Map : Action&lt;System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration&lt;#'EntityType&gt;&gt; -&gt; System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;'EntityType (requires 'EntityType : null)&gt;" Usage="entityTypeConfiguration.Map derivedTypeMapConfigurationAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDerived">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TEntityType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="derivedTypeMapConfigurationAction" Type="System.Action&lt;System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration&lt;TDerived&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDerived"> The derived entity type to be configured. </typeparam>
        <param name="derivedTypeMapConfigurationAction">
            An action that performs configuration against an
            <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />
            .
            </param>
        <summary>
            Allows advanced configuration related to how a derived entity type is mapped to the database schema.
            Calls to Map are additive, subsequent calls will not override configuration already preformed via Map.
            </summary>
        <returns> The same EntityTypeConfiguration instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapToStoredProcedures">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt; MapToStoredProcedures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1&lt;!TEntityType&gt; MapToStoredProcedures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures" />
      <MemberSignature Language="VB.NET" Value="Public Function MapToStoredProcedures () As EntityTypeConfiguration(Of TEntityType)" />
      <MemberSignature Language="F#" Value="member this.MapToStoredProcedures : unit -&gt; System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;'EntityType (requires 'EntityType : null)&gt;" Usage="entityTypeConfiguration.MapToStoredProcedures " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Configures this type to use stored procedures for insert, update and delete.
            The default conventions for procedure and parameter names will be used.
            </summary>
        <returns> The same configuration instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapToStoredProcedures">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt; MapToStoredProcedures (Action&lt;System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration&lt;TEntityType&gt;&gt; modificationStoredProcedureMappingConfigurationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1&lt;!TEntityType&gt; MapToStoredProcedures(class System.Action`1&lt;class System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1&lt;!TEntityType&gt;&gt; modificationStoredProcedureMappingConfigurationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function MapToStoredProcedures (modificationStoredProcedureMappingConfigurationAction As Action(Of ModificationStoredProceduresConfiguration(Of TEntityType))) As EntityTypeConfiguration(Of TEntityType)" />
      <MemberSignature Language="F#" Value="member this.MapToStoredProcedures : Action&lt;System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration&lt;'EntityType&gt;&gt; -&gt; System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;'EntityType (requires 'EntityType : null)&gt;" Usage="entityTypeConfiguration.MapToStoredProcedures modificationStoredProcedureMappingConfigurationAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modificationStoredProcedureMappingConfigurationAction" Type="System.Action&lt;System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration&lt;TEntityType&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="modificationStoredProcedureMappingConfigurationAction">
            Configuration to override the default conventions for procedure and parameter names.
            </param>
        <summary>
            Configures this type to use stored procedures for insert, update and delete.
            </summary>
        <returns> The same configuration instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="entityTypeConfiguration.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt; ToTable (string tableName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1&lt;!TEntityType&gt; ToTable(string tableName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToTable (tableName As String) As EntityTypeConfiguration(Of TEntityType)" />
      <MemberSignature Language="F#" Value="member this.ToTable : string -&gt; System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;'EntityType (requires 'EntityType : null)&gt;" Usage="entityTypeConfiguration.ToTable tableName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tableName"> The name of the table. </param>
        <summary>
            Configures the table name that this entity type is mapped to.
            </summary>
        <returns> The same EntityTypeConfiguration instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTable">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt; ToTable (string tableName, string schemaName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1&lt;!TEntityType&gt; ToTable(string tableName, string schemaName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToTable (tableName As String, schemaName As String) As EntityTypeConfiguration(Of TEntityType)" />
      <MemberSignature Language="F#" Value="member this.ToTable : string * string -&gt; System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;'EntityType (requires 'EntityType : null)&gt;" Usage="entityTypeConfiguration.ToTable (tableName, schemaName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableName" Type="System.String" />
        <Parameter Name="schemaName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tableName"> The name of the table. </param>
        <param name="schemaName"> The database schema of the table. </param>
        <summary>
            Configures the table name that this entity type is mapped to.
            </summary>
        <returns> The same EntityTypeConfiguration instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>