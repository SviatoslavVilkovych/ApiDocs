<Type Name="IndexAnnotation" FullName="System.Data.Entity.Infrastructure.Annotations.IndexAnnotation">
  <TypeSignature Language="C#" Value="public class IndexAnnotation : System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IndexAnnotation extends System.Object implements class System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" />
  <TypeSignature Language="VB.NET" Value="Public Class IndexAnnotation&#xA;Implements IMergeableAnnotation" />
  <TypeSignature Language="F#" Value="type IndexAnnotation = class&#xA;    interface IMergeableAnnotation" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Instances of this class are used as custom annotations for representing database indexes in an
            Entity Framework model.
            </summary>
    <remarks>
            An index annotation is added to a Code First model when an <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> is placed on
            a mapped property of that model. This is used by Entity Framework Migrations to create indexes on
            mapped database columns. Note that multiple index attributes on a property will be merged into a
            single annotation for the column. Similarly, index attributes on multiple properties that map to the
            same column will be merged into a single annotation for the column. This means that one index
            annotation can represent multiple indexes. Within an annotation there can be only one index with any
            given name.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexAnnotation (System.Collections.Generic.IEnumerable&lt;System.ComponentModel.DataAnnotations.Schema.IndexAttribute&gt; indexAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.DataAnnotations.Schema.IndexAttribute&gt; indexAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.Schema.IndexAttribute})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (indexAttributes As IEnumerable(Of IndexAttribute))" />
      <MemberSignature Language="F#" Value="new System.Data.Entity.Infrastructure.Annotations.IndexAnnotation : seq&lt;System.ComponentModel.DataAnnotations.Schema.IndexAttribute&gt; -&gt; System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" Usage="new System.Data.Entity.Infrastructure.Annotations.IndexAnnotation indexAttributes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="indexAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.ComponentModel.DataAnnotations.Schema.IndexAttribute&gt;" />
      </Parameters>
      <Docs>
        <param name="indexAttributes">Index attributes representing one or more indexes.</param>
        <summary>
            Creates a new annotation for the given collection of indexes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexAnnotation (System.ComponentModel.DataAnnotations.Schema.IndexAttribute indexAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.DataAnnotations.Schema.IndexAttribute indexAttribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)" />
      <MemberSignature Language="F#" Value="new System.Data.Entity.Infrastructure.Annotations.IndexAnnotation : System.ComponentModel.DataAnnotations.Schema.IndexAttribute -&gt; System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" Usage="new System.Data.Entity.Infrastructure.Annotations.IndexAnnotation indexAttribute" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="indexAttribute" Type="System.ComponentModel.DataAnnotations.Schema.IndexAttribute" />
      </Parameters>
      <Docs>
        <param name="indexAttribute">An index attributes representing an index.</param>
        <summary>
            Creates a new annotation for the given index.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnnotationName">
      <MemberSignature Language="C#" Value="public const string AnnotationName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string AnnotationName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.AnnotationName" />
      <MemberSignature Language="VB.NET" Value="Public Const AnnotationName As String " />
      <MemberSignature Language="F#" Value="val mutable AnnotationName : string" Usage="System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.AnnotationName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The name used when this annotation is stored in Entity Framework metadata or serialized into
            an SSDL/EDMX file.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Indexes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.ComponentModel.DataAnnotations.Schema.IndexAttribute&gt; Indexes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.DataAnnotations.Schema.IndexAttribute&gt; Indexes" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.Indexes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Indexes As IEnumerable(Of IndexAttribute)" />
      <MemberSignature Language="F#" Value="member this.Indexes : seq&lt;System.ComponentModel.DataAnnotations.Schema.IndexAttribute&gt;" Usage="System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.Indexes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.DataAnnotations.Schema.IndexAttribute&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the indexes represented by this annotation.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompatibleWith">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.Infrastructure.Annotations.CompatibilityResult IsCompatibleWith (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Infrastructure.Annotations.CompatibilityResult IsCompatibleWith(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.IsCompatibleWith(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsCompatibleWith (other As Object) As CompatibilityResult" />
      <MemberSignature Language="F#" Value="abstract member IsCompatibleWith : obj -&gt; System.Data.Entity.Infrastructure.Annotations.CompatibilityResult&#xA;override this.IsCompatibleWith : obj -&gt; System.Data.Entity.Infrastructure.Annotations.CompatibilityResult" Usage="indexAnnotation.IsCompatibleWith other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.Annotations.CompatibilityResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">The annotation to compare.</param>
        <summary>
            Returns true if this annotation does not conflict with the given annotation such that
            the two can be combined together using the <see cref="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)" /> method.
            </summary>
        <returns>A CompatibilityResult indicating whether or not this annotation is compatible with the other.</returns>
        <remarks>
            Each index annotation contains at most one <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> with a given name.
            Two annotations are considered compatible if each IndexAttribute with a given name is only
            contained in one annotation or the other, or if both annotations contain an IndexAttribute
            with the given name.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeWith">
      <MemberSignature Language="C#" Value="public virtual object MergeWith (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MergeWith(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MergeWith (other As Object) As Object" />
      <MemberSignature Language="F#" Value="abstract member MergeWith : obj -&gt; obj&#xA;override this.MergeWith : obj -&gt; obj" Usage="indexAnnotation.MergeWith other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">The annotation to merge with this one.</param>
        <summary>
            Merges this annotation with the given annotation and returns a new annotation containing the merged indexes.
            </summary>
        <returns>A new annotation with indexes from both annotations merged.</returns>
        <remarks>
            Each index annotation contains at most one <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> with a given name.
            The merged annotation will contain IndexAttributes from both this and the other annotation.
            If both annotations contain an IndexAttribute with the same name, then the merged annotation
            will contain one IndexAttribute with that name.
            </remarks>
        <exception cref="T:System.InvalidOperationException">
            The other annotation contains indexes that are not compatible with indexes in this annotation.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="indexAnnotation.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>