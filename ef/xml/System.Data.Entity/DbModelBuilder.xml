<Type Name="DbModelBuilder" FullName="System.Data.Entity.DbModelBuilder">
  <TypeSignature Language="C#" Value="public class DbModelBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbModelBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.DbModelBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class DbModelBuilder" />
  <TypeSignature Language="F#" Value="type DbModelBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            DbModelBuilder is used to map CLR classes to a database schema.
            This code centric approach to building an Entity Data Model (EDM) model is known as 'Code First'.
            </summary>
    <remarks>
            DbModelBuilder is typically used to configure a model by overriding
            DbContext.OnModelCreating(DbModelBuilder)
            .
            You can also use DbModelBuilder independently of DbContext to build a model and then construct a
            <see cref="T:System.Data.Entity.DbContext" /> or <see cref="T:System.Data.Objects.ObjectContext" />.
            The recommended approach, however, is to use OnModelCreating in <see cref="T:System.Data.Entity.DbContext" /> as
            the workflow is more intuitive and takes care of common tasks, such as caching the created model.
            Types that form your model are registered with DbModelBuilder and optional configuration can be
            performed by applying data annotations to your classes and/or using the fluent style DbModelBuilder
            API.
            When the Build method is called a set of conventions are run to discover the initial model.
            These conventions will automatically discover aspects of the model, such as primary keys, and
            will also process any data annotations that were specified on your classes. Finally
            any configuration that was performed using the DbModelBuilder API is applied.
            Configuration done via the DbModelBuilder API takes precedence over data annotations which
            in turn take precedence over the default conventions.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DbModelBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbModelBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.DbModelBuilder" /> class.
            The process of discovering the initial model will use the set of conventions included
            in the most recent version of the Entity Framework installed on your machine.
            </summary>
        <remarks>
            Upgrading to newer versions of the Entity Framework may cause breaking changes
            in your application because new conventions may cause the initial model to be
            configured differently. There is an alternate constructor that allows a specific
            version of conventions to be specified.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DbModelBuilder (System.Data.Entity.DbModelBuilderVersion modelBuilderVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Data.Entity.DbModelBuilderVersion modelBuilderVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (modelBuilderVersion As DbModelBuilderVersion)" />
      <MemberSignature Language="F#" Value="new System.Data.Entity.DbModelBuilder : System.Data.Entity.DbModelBuilderVersion -&gt; System.Data.Entity.DbModelBuilder" Usage="new System.Data.Entity.DbModelBuilder modelBuilderVersion" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="modelBuilderVersion" Type="System.Data.Entity.DbModelBuilderVersion" />
      </Parameters>
      <Docs>
        <param name="modelBuilderVersion"> The version of conventions to be used. </param>
        <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.DbModelBuilder" /> class that will use
            a specific set of conventions to discover the initial model.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Build">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.Infrastructure.DbModel Build (System.Data.Common.DbConnection providerConnection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Infrastructure.DbModel Build(class System.Data.Common.DbConnection providerConnection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Build (providerConnection As DbConnection) As DbModel" />
      <MemberSignature Language="F#" Value="abstract member Build : System.Data.Common.DbConnection -&gt; System.Data.Entity.Infrastructure.DbModel&#xA;override this.Build : System.Data.Common.DbConnection -&gt; System.Data.Entity.Infrastructure.DbModel" Usage="dbModelBuilder.Build providerConnection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.DbModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerConnection" Type="System.Data.Common.DbConnection" />
      </Parameters>
      <Docs>
        <param name="providerConnection"> Connection to use to determine provider information. </param>
        <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> based on the configuration performed using this builder.
            The connection is used to determine the database provider being used as this
            affects the database layer of the generated model.
            </summary>
        <returns> The model that was built. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Build">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.Infrastructure.DbModel Build (System.Data.Entity.Infrastructure.DbProviderInfo providerInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Infrastructure.DbModel Build(class System.Data.Entity.Infrastructure.DbProviderInfo providerInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Build (providerInfo As DbProviderInfo) As DbModel" />
      <MemberSignature Language="F#" Value="abstract member Build : System.Data.Entity.Infrastructure.DbProviderInfo -&gt; System.Data.Entity.Infrastructure.DbModel&#xA;override this.Build : System.Data.Entity.Infrastructure.DbProviderInfo -&gt; System.Data.Entity.Infrastructure.DbModel" Usage="dbModelBuilder.Build providerInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.DbModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerInfo" Type="System.Data.Entity.Infrastructure.DbProviderInfo" />
      </Parameters>
      <Docs>
        <param name="providerInfo"> The database provider that the model will be used with. </param>
        <summary>
            Creates a <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> based on the configuration performed using this builder.
            Provider information must be specified because this affects the database layer of the generated model.
            For SqlClient the invariant name is 'System.Data.SqlClient' and the manifest token is the version year (i.e. '2005', '2008' etc.)
            </summary>
        <returns> The model that was built. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexType&lt;TComplexType&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration&lt;TComplexType&gt; ComplexType&lt;TComplexType&gt; () where TComplexType : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1&lt;!!TComplexType&gt; ComplexType&lt;class TComplexType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbModelBuilder.ComplexType``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ComplexType(Of TComplexType As Class) () As ComplexTypeConfiguration(Of TComplexType)" />
      <MemberSignature Language="F#" Value="abstract member ComplexType : unit -&gt; System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration&lt;'ComplexType (requires 'ComplexType : null)&gt; (requires 'ComplexType : null)&#xA;override this.ComplexType : unit -&gt; System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration&lt;'ComplexType (requires 'ComplexType : null)&gt; (requires 'ComplexType : null)" Usage="dbModelBuilder.ComplexType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration&lt;TComplexType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TComplexType">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TComplexType"> The type to be registered or configured. </typeparam>
        <summary>
            Registers a type as a complex type in the model and returns an object that can be used to
            configure the complex type. This method can be called multiple times for the same type to
            perform multiple lines of configuration.
            </summary>
        <returns> The configuration object for the specified complex type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Configurations">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar Configurations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar Configurations" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.DbModelBuilder.Configurations" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Configurations As ConfigurationRegistrar" />
      <MemberSignature Language="F#" Value="member this.Configurations : System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" Usage="System.Data.Entity.DbModelBuilder.Configurations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> for this DbModelBuilder.
            The registrar allows derived entity and complex type configurations to be registered with this builder.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conventions">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration Conventions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration Conventions" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.DbModelBuilder.Conventions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Conventions As ConventionsConfiguration" />
      <MemberSignature Language="F#" Value="member this.Conventions : System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration" Usage="System.Data.Entity.DbModelBuilder.Conventions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Provides access to the settings of this DbModelBuilder that deal with conventions.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Entity&lt;TEntityType&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt; Entity&lt;TEntityType&gt; () where TEntityType : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1&lt;!!TEntityType&gt; Entity&lt;class TEntityType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbModelBuilder.Entity``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Entity(Of TEntityType As Class) () As EntityTypeConfiguration(Of TEntityType)" />
      <MemberSignature Language="F#" Value="abstract member Entity : unit -&gt; System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;'EntityType (requires 'EntityType : null)&gt; (requires 'EntityType : null)&#xA;override this.Entity : unit -&gt; System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;'EntityType (requires 'EntityType : null)&gt; (requires 'EntityType : null)" Usage="dbModelBuilder.Entity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.EntityTypeConfiguration&lt;TEntityType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntityType">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TEntityType"> The type to be registered or configured. </typeparam>
        <summary>
            Registers an entity type as part of the model and returns an object that can be used to
            configure the entity. This method can be called multiple times for the same entity to
            perform multiple lines of configuration.
            </summary>
        <returns> The configuration object for the specified entity type. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbModelBuilder.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dbModelBuilder.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbModelBuilder.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dbModelBuilder.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbModelBuilder.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="dbModelBuilder.GetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the <see cref="T:System.Type" /> of the current instance.
            </summary>
        <returns>The exact runtime type of the current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDefaultSchema">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.DbModelBuilder HasDefaultSchema (string schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.DbModelBuilder HasDefaultSchema(string schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbModelBuilder.HasDefaultSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasDefaultSchema (schema As String) As DbModelBuilder" />
      <MemberSignature Language="F#" Value="abstract member HasDefaultSchema : string -&gt; System.Data.Entity.DbModelBuilder&#xA;override this.HasDefaultSchema : string -&gt; System.Data.Entity.DbModelBuilder" Usage="dbModelBuilder.HasDefaultSchema schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.DbModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="schema"> The name of the default database schema. </param>
        <summary>
            Configures the default database schema name. This default database schema name is used
            for database objects that do not have an explicitly configured schema name.
            </summary>
        <returns> The same DbModelBuilder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.DbModelBuilder Ignore (System.Collections.Generic.IEnumerable&lt;Type&gt; types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.DbModelBuilder Ignore(class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Ignore (types As IEnumerable(Of Type)) As DbModelBuilder" />
      <MemberSignature Language="F#" Value="abstract member Ignore : seq&lt;Type&gt; -&gt; System.Data.Entity.DbModelBuilder&#xA;override this.Ignore : seq&lt;Type&gt; -&gt; System.Data.Entity.DbModelBuilder" Usage="dbModelBuilder.Ignore types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.DbModelBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Collections.Generic.IEnumerable&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="types"> The types to be excluded from the model. </param>
        <summary>
            Excludes the specified type(s) from the model. This is used to remove types from the model that were added
            by convention during initial model discovery.
            </summary>
        <returns> The same DbModelBuilder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.DbModelBuilder Ignore&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.DbModelBuilder Ignore&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbModelBuilder.Ignore``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Ignore(Of T As Class) () As DbModelBuilder" />
      <MemberSignature Language="F#" Value="abstract member Ignore : unit -&gt; System.Data.Entity.DbModelBuilder (requires 'T : null)&#xA;override this.Ignore : unit -&gt; System.Data.Entity.DbModelBuilder (requires 'T : null)" Usage="dbModelBuilder.Ignore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.DbModelBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"> The type to be excluded. </typeparam>
        <summary>
            Excludes a type from the model. This is used to remove types from the model that were added
            by convention during initial model discovery.
            </summary>
        <returns> The same DbModelBuilder instance so that multiple calls can be chained. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration Properties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration Properties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbModelBuilder.Properties" />
      <MemberSignature Language="VB.NET" Value="Public Function Properties () As PropertyConventionConfiguration" />
      <MemberSignature Language="F#" Value="member this.Properties : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration" Usage="dbModelBuilder.Properties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Begins configuration of a lightweight convention that applies to all properties
            in the model.
            </summary>
        <returns> A configuration object for the convention. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration Properties&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration Properties&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbModelBuilder.Properties``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Properties(Of T) () As PropertyConventionConfiguration" />
      <MemberSignature Language="F#" Value="member this.Properties : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration" Usage="dbModelBuilder.Properties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"> The type of the properties that the convention will apply to. </typeparam>
        <summary>
            Begins configuration of a lightweight convention that applies to all primitive
            properties of the specified type in the model.
            </summary>
        <returns> A configuration object for the convention. </returns>
        <remarks>
            The convention will apply to both nullable and non-nullable properties of the
            specified type.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterEntityType">
      <MemberSignature Language="C#" Value="public virtual void RegisterEntityType (Type entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterEntityType(class System.Type entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbModelBuilder.RegisterEntityType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RegisterEntityType (entityType As Type)" />
      <MemberSignature Language="F#" Value="abstract member RegisterEntityType : Type -&gt; unit&#xA;override this.RegisterEntityType : Type -&gt; unit" Usage="dbModelBuilder.RegisterEntityType entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="entityType"> The type to be registered. </param>
        <summary>
            Registers an entity type as part of the model.
            </summary>
        <remarks>
            This method is provided as a convenience to allow entity types to be registered dynamically
            without the need to use MakeGenericMethod in order to call the normal generic Entity method.
            This method does not allow further configuration of the entity type using the fluent APIs since
            these APIs make extensive use of generic type parameters.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbModelBuilder.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dbModelBuilder.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Types">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration Types ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration Types() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbModelBuilder.Types" />
      <MemberSignature Language="VB.NET" Value="Public Function Types () As TypeConventionConfiguration" />
      <MemberSignature Language="F#" Value="member this.Types : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration" Usage="dbModelBuilder.Types " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Begins configuration of a lightweight convention that applies to all entities and complex types in
            the model.
            </summary>
        <returns> A configuration object for the convention. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Types&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration&lt;T&gt; Types&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1&lt;!!T&gt; Types&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbModelBuilder.Types``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Types(Of T As Class) () As TypeConventionConfiguration(Of T)" />
      <MemberSignature Language="F#" Value="member this.Types : unit -&gt; System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration&lt;'T (requires 'T : null)&gt; (requires 'T : null)" Usage="dbModelBuilder.Types " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"> The type of the entities or complex types that this convention will apply to. </typeparam>
        <summary>
            Begins configuration of a lightweight convention that applies to all entities and complex types
            in the model that inherit from or implement the type specified by the generic argument.
            This method does not register types as part of the model.
            </summary>
        <returns> A configuration object for the convention. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>