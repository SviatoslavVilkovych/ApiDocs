<Type Name="IDatabaseInitializer&lt;TContext&gt;" FullName="System.Data.Entity.IDatabaseInitializer&lt;TContext&gt;">
  <TypeSignature Language="C#" Value="public interface IDatabaseInitializer&lt;in TContext&gt; where TContext : DbContext" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDatabaseInitializer`1&lt;(class System.Data.Entity.DbContext) - TContext&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.IDatabaseInitializer`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDatabaseInitializer(Of In TContext)" />
  <TypeSignature Language="F#" Value="type IDatabaseInitializer&lt;'Context (requires 'Context :&gt; DbContext)&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TContext">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
        <BaseTypeName>System.Data.Entity.DbContext</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="TContext">The type of the context.</typeparam>
    <summary>
            An implementation of this interface is used to initialize the underlying database when
            an instance of a <see cref="T:System.Data.Entity.DbContext" /> derived class is used for the first time.
            This initialization can conditionally create the database and/or seed it with data.
            The strategy used is set using the static InitializationStrategy property of the
            <see cref="T:System.Data.Entity.Database" /> class.
            The following implementations are provided: <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" />,
            <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" />, <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="InitializeDatabase">
      <MemberSignature Language="C#" Value="public void InitializeDatabase (TContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeDatabase(!TContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InitializeDatabase (context As TContext)" />
      <MemberSignature Language="F#" Value="abstract member InitializeDatabase : 'Context -&gt; unit" Usage="iDatabaseInitializer.InitializeDatabase context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="TContext" />
      </Parameters>
      <Docs>
        <param name="context"> The context. </param>
        <summary>
            Executes the strategy to initialize the database for the given context.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>