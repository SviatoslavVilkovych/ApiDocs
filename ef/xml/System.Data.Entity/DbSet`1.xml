<Type Name="DbSet&lt;TEntity&gt;" FullName="System.Data.Entity.DbSet&lt;TEntity&gt;">
  <TypeSignature Language="C#" Value="public class DbSet&lt;TEntity&gt; : System.Data.Entity.Infrastructure.DbQuery&lt;TEntity&gt;, System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.Data.Entity.IDbSet&lt;TEntity&gt;, System.Linq.IQueryable&lt;TEntity&gt; where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbSet`1&lt;class TEntity&gt; extends System.Data.Entity.Infrastructure.DbQuery`1&lt;!TEntity&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.Data.Entity.IDbSet`1&lt;!TEntity&gt;, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.DbSet`1" />
  <TypeSignature Language="VB.NET" Value="Public Class DbSet(Of TEntity)&#xA;Inherits DbQuery(Of TEntity)&#xA;Implements IDbSet(Of TEntity), IEnumerable(Of TEntity), IQueryable(Of TEntity)" />
  <TypeSignature Language="F#" Value="type DbSet&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    inherit DbQuery&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IDbSet&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IQueryable&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Entity.Infrastructure.DbQuery&lt;TEntity&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TResult">TEntity</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Entity.IDbSet&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;TEntity&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification="Name is intentional")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TEntity"> The type that defines the set. </typeparam>
    <summary>
            A DbSet represents the collection of all entities in the context, or that can be queried from the
            database, of a given type.  DbSet objects are created from a DbContext using the DbContext.Set method.
            </summary>
    <remarks>
            Note that DbSet does not support MEST (Multiple Entity Sets per Type) meaning that there is always a
            one-to-one correlation between a type and a set.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbSet ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbSet`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Creates an instance of a <see cref="T:System.Data.Entity.DbSet`1" /> when called from the constructor of a derived
            type that will be used as a test double for DbSets. Methods and properties that will be used by the
            test double must be implemented by the test double except AsNoTracking, AsStreaming, an Include where
            the default implementation is a no-op.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual TEntity Add (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TEntity Add(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbSet`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (entity As TEntity) As TEntity" />
      <MemberSignature Language="F#" Value="abstract member Add : 'Entity -&gt; 'Entity&#xA;override this.Add : 'Entity -&gt; 'Entity" Usage="dbSet.Add entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.IDbSet`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;TEntity&gt; AddRange (System.Collections.Generic.IEnumerable&lt;TEntity&gt; entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt; AddRange(class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddRange (entities As IEnumerable(Of TEntity)) As IEnumerable(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member AddRange : seq&lt;'Entity (requires 'Entity : null)&gt; -&gt; seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.AddRange : seq&lt;'Entity (requires 'Entity : null)&gt; -&gt; seq&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.AddRange entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TEntity&gt;" />
      </Parameters>
      <Docs>
        <param name="entities">The collection of entities to add.</param>
        <summary>
            Adds the given collection of entities into context underlying the set with each entity being put into
            the Added state such that it will be inserted into the database when SaveChanges is called.
            </summary>
        <returns>
            The collection of entities.
            </returns>
        <remarks>
            Note that if <see cref="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled" /> is set to true (which is
            the default), then DetectChanges will be called once before adding any entities and will not be called
            again. This means that in some situations AddRange may perform significantly better than calling
            Add multiple times would do.
            Note that entities that are already in the context in some other state will have their state set to
            Added.  AddRange is a no-op for entities that are already in the context in the Added state.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public virtual TEntity Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TEntity Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbSet`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Attach (entity As TEntity) As TEntity" />
      <MemberSignature Language="F#" Value="abstract member Attach : 'Entity -&gt; 'Entity&#xA;override this.Attach : 'Entity -&gt; 'Entity" Usage="dbSet.Attach entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.IDbSet`1.Attach(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual TEntity Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TEntity Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbSet`1.Create" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Create () As TEntity" />
      <MemberSignature Language="F#" Value="abstract member Create : unit -&gt; 'Entity&#xA;override this.Create : unit -&gt; 'Entity" Usage="dbSet.Create " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.IDbSet`1.Create</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;TDerivedEntity&gt;">
      <MemberSignature Language="C#" Value="public virtual TDerivedEntity Create&lt;TDerivedEntity&gt; () where TDerivedEntity : class, TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TDerivedEntity Create&lt;class (!TEntity) TDerivedEntity&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbSet`1.Create``1" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Create(Of TDerivedEntity As {Class, TEntity}) () As TDerivedEntity" />
      <MemberSignature Language="F#" Value="abstract member Create : unit -&gt; 'DerivedEntity&#xA;override this.Create : unit -&gt; 'DerivedEntity" Usage="dbSet.Create " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.IDbSet`1.Create``1</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TDerivedEntity</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDerivedEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TDerivedEntity">To be added.</typeparam>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbSet`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dbSet.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public virtual TEntity Find (params object[] keyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TEntity Find(object[] keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbSet`1.Find(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Find (ParamArray keyValues As Object()) As TEntity" />
      <MemberSignature Language="F#" Value="abstract member Find : obj[] -&gt; 'Entity&#xA;override this.Find : obj[] -&gt; 'Entity" Usage="dbSet.Find keyValues" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.IDbSet`1.Find(System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keyValues"> The values of the primary key for the entity to be found. </param>
        <summary>
            Finds an entity with the given primary key values.
            If an entity with the given primary key values exists in the context, then it is
            returned immediately without making a request to the store.  Otherwise, a request
            is made to the store for an entity with the given primary key values and this entity,
            if found, is attached to the context and returned.  If no entity is found in the
            context or the store, then null is returned.
            </summary>
        <returns> The entity found, or null. </returns>
        <remarks>
            The ordering of composite key values is as defined in the EDM, which is in turn as defined in
            the designer, by the Code First fluent API, or by the DataMember attribute.
            </remarks>
        <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TEntity&gt; FindAsync (params object[] keyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TEntity&gt; FindAsync(object[] keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbSet`1.FindAsync(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindAsync (ParamArray keyValues As Object()) As Task(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member FindAsync : obj[] -&gt; System.Threading.Tasks.Task&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.FindAsync : obj[] -&gt; System.Threading.Tasks.Task&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.FindAsync keyValues" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValues" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keyValues"> The values of the primary key for the entity to be found. </param>
        <summary>
            Asynchronously finds an entity with the given primary key values.
            If an entity with the given primary key values exists in the context, then it is
            returned immediately without making a request to the store.  Otherwise, a request
            is made to the store for an entity with the given primary key values and this entity,
            if found, is attached to the context and returned.  If no entity is found in the
            context or the store, then null is returned.
            </summary>
        <returns> A task that represents the asynchronous find operation. The task result contains the entity found, or null. </returns>
        <remarks>
            The ordering of composite key values is as defined in the EDM, which is in turn as defined in
            the designer, by the Code First fluent API, or by the DataMember attribute.
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TEntity&gt; FindAsync (System.Threading.CancellationToken cancellationToken, params object[] keyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TEntity&gt; FindAsync(valuetype System.Threading.CancellationToken cancellationToken, object[] keyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbSet`1.FindAsync(System.Threading.CancellationToken,System.Object[])" />
      <MemberSignature Language="F#" Value="abstract member FindAsync : System.Threading.CancellationToken * obj[] -&gt; System.Threading.Tasks.Task&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.FindAsync : System.Threading.CancellationToken * obj[] -&gt; System.Threading.Tasks.Task&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.FindAsync (cancellationToken, keyValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="keyValues" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <param name="keyValues"> The values of the primary key for the entity to be found. </param>
        <summary>
            Asynchronously finds an entity with the given primary key values.
            If an entity with the given primary key values exists in the context, then it is
            returned immediately without making a request to the store.  Otherwise, a request
            is made to the store for an entity with the given primary key values and this entity,
            if found, is attached to the context and returned.  If no entity is found in the
            context or the store, then null is returned.
            </summary>
        <returns> A task that represents the asynchronous find operation. The task result contains the entity found, or null. </returns>
        <remarks>
            The ordering of composite key values is as defined in the EDM, which is in turn as defined in
            the designer, by the Code First fluent API, or by the DataMember attribute.
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
        <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbSet`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dbSet.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbSet`1.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="dbSet.GetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ObjectModel.ObservableCollection&lt;TEntity&gt; Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ObservableCollection`1&lt;!TEntity&gt; Local" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.DbSet`1.Local" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Local As ObservableCollection(Of TEntity)" />
      <MemberSignature Language="F#" Value="member this.Local : System.Collections.ObjectModel.ObservableCollection&lt;'Entity (requires 'Entity : null)&gt;" Usage="System.Data.Entity.DbSet&lt;'Entity (requires 'Entity : null)&gt;.Local" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Entity.IDbSet`1.Local</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ObservableCollection&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Data.Entity.DbSet (System.Data.Entity.DbSet&lt;TEntity&gt; entry);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Data.Entity.DbSet op_Implicit(class System.Data.Entity.DbSet`1&lt;!TEntity&gt; entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (entry As DbSet(Of TEntity)) As DbSet" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Data.Entity.DbSet&lt;'Entity (requires 'Entity : null)&gt; -&gt; System.Data.Entity.DbSet" Usage="System.Data.Entity.DbSet&lt;'Entity (requires 'Entity : null)&gt;.op_Implicit entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2225:OperatorOverloadsHaveNamedAlternates", Justification="Intentionally just implicit to reduce API clutter.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.DbSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Data.Entity.DbSet&lt;TEntity&gt;" />
      </Parameters>
      <Docs>
        <param name="entry">The generic set object.</param>
        <summary>
            Returns the equivalent non-generic <see cref="T:System.Data.Entity.DbSet" /> object.
            </summary>
        <returns> The non-generic set object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual TEntity Remove (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TEntity Remove(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbSet`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Remove (entity As TEntity) As TEntity" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'Entity -&gt; 'Entity&#xA;override this.Remove : 'Entity -&gt; 'Entity" Usage="dbSet.Remove entity" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.IDbSet`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;TEntity&gt; RemoveRange (System.Collections.Generic.IEnumerable&lt;TEntity&gt; entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt; RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveRange (entities As IEnumerable(Of TEntity)) As IEnumerable(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member RemoveRange : seq&lt;'Entity (requires 'Entity : null)&gt; -&gt; seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.RemoveRange : seq&lt;'Entity (requires 'Entity : null)&gt; -&gt; seq&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.RemoveRange entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TEntity&gt;" />
      </Parameters>
      <Docs>
        <param name="entities">The collection of entities to delete.</param>
        <summary>
            Removes the given collection of entities from the context underlying the set with each entity being put into
            the Deleted state such that it will be deleted from the database when SaveChanges is called.
            </summary>
        <returns>
            The collection of entities.
            </returns>
        <remarks>
            Note that if <see cref="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled" /> is set to true (which is
            the default), then DetectChanges will be called once before delete any entities and will not be called
            again. This means that in some situations RemoveRange may perform significantly better than calling
            Remove multiple times would do.
            Note that if any entity exists in the context in the Added state, then this method
            will cause it to be detached from the context.  This is because an Added entity is assumed not to
            exist in the database such that trying to delete it does not make sense.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SqlQuery">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.Infrastructure.DbSqlQuery&lt;TEntity&gt; SqlQuery (string sql, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Infrastructure.DbSqlQuery`1&lt;!TEntity&gt; SqlQuery(string sql, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SqlQuery (sql As String, ParamArray parameters As Object()) As DbSqlQuery(Of TEntity)" />
      <MemberSignature Language="F#" Value="abstract member SqlQuery : string * obj[] -&gt; System.Data.Entity.Infrastructure.DbSqlQuery&lt;'Entity (requires 'Entity : null)&gt;&#xA;override this.SqlQuery : string * obj[] -&gt; System.Data.Entity.Infrastructure.DbSqlQuery&lt;'Entity (requires 'Entity : null)&gt;" Usage="dbSet.SqlQuery (sql, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.DbSqlQuery&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sql" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="sql"> The SQL query string. </param>
        <param name="parameters"> 
             The parameters to apply to the SQL query string. If output parameters are used, their values will 
             not be available until the results have been read completely. This is due to the underlying behavior 
             of DbDataReader, see http://go.microsoft.com/fwlink/?LinkID=398589 for more details.
             </param>
        <summary>
             Creates a raw SQL query that will return entities in this set.  By default, the
             entities returned are tracked by the context; this can be changed by calling
             AsNoTracking on the <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> returned.
             Note that the entities returned are always of the type for this set and never of
             a derived type.  If the table or tables queried may contain data for other entity
             types, then the SQL query must be written appropriately to ensure that only entities of
             the correct type are returned.
            
             As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional arguments. Any parameter values you supply will automatically be converted to a DbParameter.
             context.Blogs.SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor);
             Alternatively, you can also construct a DbParameter and supply it to SqlQuery. This allows you to use named parameters in the SQL query string.
             context.Blogs.SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));
             </summary>
        <returns>
             A <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> object that will execute the query when it is enumerated.
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>