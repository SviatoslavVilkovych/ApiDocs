<Type Name="FunctionImportEntityTypeMapping" FullName="System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping">
  <TypeSignature Language="C#" Value="public sealed class FunctionImportEntityTypeMapping : System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FunctionImportEntityTypeMapping extends System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FunctionImportEntityTypeMapping&#xA;Inherits FunctionImportStructuralTypeMapping" />
  <TypeSignature Language="F#" Value="type FunctionImportEntityTypeMapping = class&#xA;    inherit FunctionImportStructuralTypeMapping" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents a function import entity type mapping.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FunctionImportEntityTypeMapping (System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Metadata.Edm.EntityType&gt; isOfTypeEntityTypes, System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Metadata.Edm.EntityType&gt; entityTypes, System.Collections.ObjectModel.Collection&lt;System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping&gt; properties, System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition&gt; conditions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Metadata.Edm.EntityType&gt; isOfTypeEntityTypes, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Metadata.Edm.EntityType&gt; entityTypes, class System.Collections.ObjectModel.Collection`1&lt;class System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping&gt; properties, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition&gt; conditions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntityType},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntityType},System.Collections.ObjectModel.Collection{System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isOfTypeEntityTypes As IEnumerable(Of EntityType), entityTypes As IEnumerable(Of EntityType), properties As Collection(Of FunctionImportReturnTypePropertyMapping), conditions As IEnumerable(Of FunctionImportEntityTypeMappingCondition))" />
      <MemberSignature Language="F#" Value="new System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping : seq&lt;System.Data.Entity.Core.Metadata.Edm.EntityType&gt; * seq&lt;System.Data.Entity.Core.Metadata.Edm.EntityType&gt; * System.Collections.ObjectModel.Collection&lt;System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping&gt; * seq&lt;System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition&gt; -&gt; System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping" Usage="new System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping (isOfTypeEntityTypes, entityTypes, properties, conditions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isOfTypeEntityTypes" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Metadata.Edm.EntityType&gt;" />
        <Parameter Name="entityTypes" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Metadata.Edm.EntityType&gt;" />
        <Parameter Name="properties" Type="System.Collections.ObjectModel.Collection&lt;System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping&gt;" />
        <Parameter Name="conditions" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition&gt;" />
      </Parameters>
      <Docs>
        <param name="isOfTypeEntityTypes">The entity types at the base of 
            the type hierarchies to be mapped.</param>
        <param name="entityTypes">The entity types to be mapped.</param>
        <param name="properties">The property mappings for the result types of a function import.</param>
        <param name="conditions">The mapping conditions.</param>
        <summary>
            Initializes a new FunctionImportEntityTypeMapping instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conditions">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition&gt; Conditions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition&gt; Conditions" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.Conditions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Conditions As ReadOnlyCollection(Of FunctionImportEntityTypeMappingCondition)" />
      <MemberSignature Language="F#" Value="member this.Conditions : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition&gt;" Usage="System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.Conditions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the mapping conditions.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.EntityType&gt; EntityTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Entity.Core.Metadata.Edm.EntityType&gt; EntityTypes" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.EntityTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntityTypes As ReadOnlyCollection(Of EntityType)" />
      <MemberSignature Language="F#" Value="member this.EntityTypes : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.EntityType&gt;" Usage="System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.EntityTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.EntityType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the entity types being mapped.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOfTypeEntityTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.EntityType&gt; IsOfTypeEntityTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Entity.Core.Metadata.Edm.EntityType&gt; IsOfTypeEntityTypes" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.IsOfTypeEntityTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOfTypeEntityTypes As ReadOnlyCollection(Of EntityType)" />
      <MemberSignature Language="F#" Value="member this.IsOfTypeEntityTypes : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.EntityType&gt;" Usage="System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.IsOfTypeEntityTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Entity.Core.Metadata.Edm.EntityType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the entity types at the base of the hierarchies being mapped.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>