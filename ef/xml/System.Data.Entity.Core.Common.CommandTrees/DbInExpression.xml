<Type Name="DbInExpression" FullName="System.Data.Entity.Core.Common.CommandTrees.DbInExpression">
  <TypeSignature Language="C#" Value="public class DbInExpression : System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbInExpression extends System.Data.Entity.Core.Common.CommandTrees.DbExpression" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class DbInExpression&#xA;Inherits DbExpression" />
  <TypeSignature Language="F#" Value="type DbInExpression = class&#xA;    inherit DbExpression" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Entity.Core.Common.CommandTrees.DbExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents a boolean expression that tests whether a specified item matches any element in a list.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public override void Accept (System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Accept(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Accept (visitor As DbExpressionVisitor)" />
      <MemberSignature Language="F#" Value="override this.Accept : System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor -&gt; unit" Usage="dbInExpression.Accept visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor"> An instance of DbExpressionVisitor. </param>
        <summary>
            The visitor pattern method for expression visitors that do not produce a result value.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="visitor" />
            is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public override TResultType Accept&lt;TResultType&gt; (System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor&lt;TResultType&gt; visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!TResultType Accept&lt;TResultType&gt;(class System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1&lt;!!TResultType&gt; visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Accept(Of TResultType) (visitor As DbExpressionVisitor(Of TResultType)) As TResultType" />
      <MemberSignature Language="F#" Value="override this.Accept : System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor&lt;'ResultType&gt; -&gt; 'ResultType" Usage="dbInExpression.Accept visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResultType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor&lt;TResultType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResultType">
            The type of the result produced by <paramref name="visitor" /></typeparam>
        <param name="visitor"> An instance of a typed DbExpressionVisitor that produces a result value of type TResultType. </param>
        <summary>
            The visitor pattern method for expression visitors that produce a result value of a specific type.
            </summary>
        <returns>
            An instance of <typeparamref name="TResultType" /> .
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="visitor" />
            is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Core.Common.CommandTrees.DbExpression Item { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Entity.Core.Common.CommandTrees.DbExpression Item" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Item" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item As DbExpression" />
      <MemberSignature Language="F#" Value="member this.Item : System.Data.Entity.Core.Common.CommandTrees.DbExpression" Usage="System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Core.Common.CommandTrees.DbExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a DbExpression that specifies the item to be matched.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="List">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; List { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt; List" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.List" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property List As IList(Of DbExpression)" />
      <MemberSignature Language="F#" Value="member this.List : System.Collections.Generic.IList&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;" Usage="System.Data.Entity.Core.Common.CommandTrees.DbInExpression.List" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Data.Entity.Core.Common.CommandTrees.DbExpression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the list of DbExpression to test for a match.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>