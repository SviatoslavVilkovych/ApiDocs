<Type Name="TypeConventionConfiguration&lt;T&gt;" FullName="System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration&lt;T&gt;">
  <TypeSignature Language="C#" Value="public class TypeConventionConfiguration&lt;T&gt; where T : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TypeConventionConfiguration`1&lt;class T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeConventionConfiguration(Of T)" />
  <TypeSignature Language="F#" Value="type TypeConventionConfiguration&lt;'T (requires 'T : null)&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T"> The common type of the entity types that this convention applies to. </typeparam>
    <summary>
            Allows configuration to be performed for a lightweight convention based on
            the entity types in a model that inherit from a common, specified type.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Configure">
      <MemberSignature Language="C#" Value="public void Configure (Action&lt;System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration&lt;T&gt;&gt; entityConfigurationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Configure(class System.Action`1&lt;class System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1&lt;!T&gt;&gt; entityConfigurationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Configure (entityConfigurationAction As Action(Of ConventionTypeConfiguration(Of T)))" />
      <MemberSignature Language="F#" Value="member this.Configure : Action&lt;System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration&lt;'T&gt;&gt; -&gt; unit" Usage="typeConventionConfiguration.Configure entityConfigurationAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityConfigurationAction" Type="System.Action&lt;System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration&lt;T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="entityConfigurationAction">
            An action that performs configuration against a
            <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />
            .
            </param>
        <summary>
            Allows configuration of the entity types that this convention applies to.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="typeConventionConfiguration.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="typeConventionConfiguration.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="typeConventionConfiguration.GetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the <see cref="T:System.Type" /> of the current instance.
            </summary>
        <returns>The exact runtime type of the current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Having&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration&lt;T,TValue&gt; Having&lt;TValue&gt; (Func&lt;Type,TValue&gt; capturingPredicate) where TValue : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2&lt;!T, !!TValue&gt; Having&lt;class TValue&gt;(class System.Func`2&lt;class System.Type, !!TValue&gt; capturingPredicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Having``1(System.Func{System.Type,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Having(Of TValue As Class) (capturingPredicate As Func(Of Type, TValue)) As TypeConventionWithHavingConfiguration(Of T, TValue)" />
      <MemberSignature Language="F#" Value="member this.Having : Func&lt;Type, 'Value (requires 'Value : null)&gt; -&gt; System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration&lt;'T, 'Value (requires 'T : null and 'Value : null)&gt; (requires 'Value : null)" Usage="typeConventionConfiguration.Having capturingPredicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration&lt;T,TValue&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="capturingPredicate" Type="System.Func&lt;System.Type,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"> Type of the captured value. </typeparam>
        <param name="capturingPredicate">
            A function to capture a value for each entity type. If the value is null, the
            entity type will be filtered out.
            </param>
        <summary>
            Filters the entity types that this convention applies to based on a predicate
            while capturing a value to use later during configuration.
            </summary>
        <returns>
            An <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="typeConventionConfiguration.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration&lt;T&gt; Where (Func&lt;Type,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1&lt;!T&gt; Where(class System.Func`2&lt;class System.Type, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Where(System.Func{System.Type,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Function Where (predicate As Func(Of Type, Boolean)) As TypeConventionConfiguration(Of T)" />
      <MemberSignature Language="F#" Value="member this.Where : Func&lt;Type, bool&gt; -&gt; System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration&lt;'T (requires 'T : null)&gt;" Usage="typeConventionConfiguration.Where predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;System.Type,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="predicate"> A function to test each entity type for a condition. </param>
        <summary>
            Filters the entity types that this convention applies to based on a
            predicate.
            </summary>
        <returns>
            An <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1" /> instance so that multiple calls can be chained.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>