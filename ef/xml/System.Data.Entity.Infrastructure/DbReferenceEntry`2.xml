<Type Name="DbReferenceEntry&lt;TEntity,TProperty&gt;" FullName="System.Data.Entity.Infrastructure.DbReferenceEntry&lt;TEntity,TProperty&gt;">
  <TypeSignature Language="C#" Value="public class DbReferenceEntry&lt;TEntity,TProperty&gt; : System.Data.Entity.Infrastructure.DbMemberEntry&lt;TEntity,TProperty&gt; where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbReferenceEntry`2&lt;class TEntity, TProperty&gt; extends System.Data.Entity.Infrastructure.DbMemberEntry`2&lt;!TEntity, !TProperty&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />
  <TypeSignature Language="VB.NET" Value="Public Class DbReferenceEntry(Of TEntity, TProperty)&#xA;Inherits DbMemberEntry(Of TEntity, TProperty)" />
  <TypeSignature Language="F#" Value="type DbReferenceEntry&lt;'Entity, 'Property (requires 'Entity : null)&gt; = class&#xA;    inherit DbMemberEntry&lt;'Entity, 'Property (requires 'Entity : null)&gt;" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TProperty" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Entity.Infrastructure.DbMemberEntry&lt;TEntity,TProperty&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TEntity">TEntity</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="TProperty">TProperty</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TEntity"> The type of the entity to which this property belongs. </typeparam>
    <typeparam name="TProperty"> The type of the property. </typeparam>
    <summary>
            Instances of this class are returned from the Reference method of
            <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> and allow operations such as loading to
            be performed on the an entity's reference navigation properties.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CurrentValue">
      <MemberSignature Language="C#" Value="public override TProperty CurrentValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TProperty CurrentValue" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CurrentValue As TProperty" />
      <MemberSignature Language="F#" Value="member this.CurrentValue : 'Property with get, set" Usage="System.Data.Entity.Infrastructure.DbReferenceEntry&lt;'Entity, 'Property (requires 'Entity : null)&gt;.CurrentValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the current value of the navigation property.  The current value is
            the entity that the navigation property references.
            </summary>
        <value> The current value. </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityEntry">
      <MemberSignature Language="C#" Value="public override System.Data.Entity.Infrastructure.DbEntityEntry&lt;TEntity&gt; EntityEntry { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Entity.Infrastructure.DbEntityEntry`1&lt;!TEntity&gt; EntityEntry" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property EntityEntry As DbEntityEntry(Of TEntity)" />
      <MemberSignature Language="F#" Value="member this.EntityEntry : System.Data.Entity.Infrastructure.DbEntityEntry&lt;'Entity (requires 'Entity : null)&gt;" Usage="System.Data.Entity.Infrastructure.DbReferenceEntry&lt;'Entity, 'Property (requires 'Entity : null)&gt;.EntityEntry" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.DbEntityEntry&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> to which this navigation property belongs.
            </summary>
        <value> An entry for the entity that owns this navigation property. </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public Property IsLoaded As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsLoaded : bool with get, set" Usage="System.Data.Entity.Infrastructure.DbReferenceEntry&lt;'Entity, 'Property (requires 'Entity : null)&gt;.IsLoaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value indicating whether the entity has been loaded from the database.
            </summary>
        <value>
          <c>true</c> if the entity is loaded or the IsLoaded has been explicitly set to true; otherwise, <c>false</c>.
            </value>
        <remarks>
            Loading the related entity from the database either using lazy-loading, as part of a query, or explicitly
            with one of the Load methods will set the IsLoaded flag to true.
            IsLoaded can be explicitly set to true to prevent the related entity from being lazy-loaded.
            Note that explict loading using one of the Load methods will load the related entity from the database
            regardless of whether or not IsLoaded is true.
            When a related entity is detached the IsLoaded flag is reset to false indicating that the related entity is
            no longer loaded.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load ()" />
      <MemberSignature Language="F#" Value="member this.Load : unit -&gt; unit" Usage="dbReferenceEntry.Load " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Loads the entity from the database.
            Note that if the entity already exists in the context, then it will not overwritten with values from the database.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task LoadAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task LoadAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.LoadAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync () As Task" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : unit -&gt; System.Threading.Tasks.Task" Usage="dbReferenceEntry.LoadAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Asynchronously loads the entity from the database.
            Note that if the entity already exists in the context, then it will not overwritten with values from the database.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task LoadAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task LoadAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.LoadAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="dbReferenceEntry.LoadAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
        <summary>
            Asynchronously loads the entity from the database.
            Note that if the entity already exists in the context, then it will not overwritten with values from the database.
            </summary>
        <returns>
            A task that represents the asynchronous operation.
            </returns>
        <remarks>
            Multiple active operations on the same context instance are not supported.  Use 'await' to ensure
            that any asynchronous operations have completed before calling another method on this context.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Data.Entity.Infrastructure.DbReferenceEntry&lt;'Entity, 'Property (requires 'Entity : null)&gt;.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the property name.
            </summary>
        <value> The property name. </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Data.Entity.Infrastructure.DbReferenceEntry (System.Data.Entity.Infrastructure.DbReferenceEntry&lt;TEntity,TProperty&gt; entry);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Data.Entity.Infrastructure.DbReferenceEntry op_Implicit(class System.Data.Entity.Infrastructure.DbReferenceEntry`2&lt;!TEntity, !TProperty&gt; entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (entry As DbReferenceEntry(Of TEntity, TProperty)) As DbReferenceEntry" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Data.Entity.Infrastructure.DbReferenceEntry&lt;'Entity, 'Property (requires 'Entity : null)&gt; -&gt; System.Data.Entity.Infrastructure.DbReferenceEntry" Usage="System.Data.Entity.Infrastructure.DbReferenceEntry&lt;'Entity, 'Property (requires 'Entity : null)&gt;.op_Implicit entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2225:OperatorOverloadsHaveNamedAlternates", Justification="Intentionally just implicit to reduce API clutter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.DbReferenceEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Data.Entity.Infrastructure.DbReferenceEntry&lt;TEntity,TProperty&gt;" />
      </Parameters>
      <Docs>
        <param name="entry">The object representing the navigation property.</param>
        <summary>
            Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> class for
            the navigation property represented by this object.
            </summary>
        <returns> A non-generic version. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;TProperty&gt; Query ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.IQueryable`1&lt;!TProperty&gt; Query() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query" />
      <MemberSignature Language="VB.NET" Value="Public Function Query () As IQueryable(Of TProperty)" />
      <MemberSignature Language="F#" Value="member this.Query : unit -&gt; System.Linq.IQueryable&lt;'Property&gt;" Usage="dbReferenceEntry.Query " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns the query that would be used to load this entity from the database.
            The returned query can be modified using LINQ to perform filtering or operations in the database.
            </summary>
        <returns> A query for the entity. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>