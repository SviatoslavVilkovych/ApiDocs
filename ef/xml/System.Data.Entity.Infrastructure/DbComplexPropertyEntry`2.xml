<Type Name="DbComplexPropertyEntry&lt;TEntity,TComplexProperty&gt;" FullName="System.Data.Entity.Infrastructure.DbComplexPropertyEntry&lt;TEntity,TComplexProperty&gt;">
  <TypeSignature Language="C#" Value="public class DbComplexPropertyEntry&lt;TEntity,TComplexProperty&gt; : System.Data.Entity.Infrastructure.DbPropertyEntry&lt;TEntity,TComplexProperty&gt; where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbComplexPropertyEntry`2&lt;class TEntity, TComplexProperty&gt; extends System.Data.Entity.Infrastructure.DbPropertyEntry`2&lt;!TEntity, !TComplexProperty&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />
  <TypeSignature Language="VB.NET" Value="Public Class DbComplexPropertyEntry(Of TEntity, TComplexProperty)&#xA;Inherits DbPropertyEntry(Of TEntity, TComplexProperty)" />
  <TypeSignature Language="F#" Value="type DbComplexPropertyEntry&lt;'Entity, 'ComplexProperty (requires 'Entity : null)&gt; = class&#xA;    inherit DbPropertyEntry&lt;'Entity, 'ComplexProperty (requires 'Entity : null)&gt;" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TComplexProperty" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Entity.Infrastructure.DbPropertyEntry&lt;TEntity,TComplexProperty&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TEntity">TEntity</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="TProperty">TComplexProperty</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TEntity"> The type of the entity to which this property belongs. </typeparam>
    <typeparam name="TComplexProperty"> The type of the property. </typeparam>
    <summary>
            Instances of this class are returned from the ComplexProperty method of
            <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> and allow access to the state of a complex property.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ComplexProperty">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Infrastructure.DbComplexPropertyEntry ComplexProperty (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.Infrastructure.DbComplexPropertyEntry ComplexProperty(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ComplexProperty (propertyName As String) As DbComplexPropertyEntry" />
      <MemberSignature Language="F#" Value="member this.ComplexProperty : string -&gt; System.Data.Entity.Infrastructure.DbComplexPropertyEntry" Usage="dbComplexPropertyEntry.ComplexProperty propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.DbComplexPropertyEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"> The name of the nested property. </param>
        <summary>
            Gets an object that represents a nested complex property of this property.
            </summary>
        <returns> An object representing the nested property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty&lt;TNestedComplexProperty&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Infrastructure.DbComplexPropertyEntry&lt;TEntity,TNestedComplexProperty&gt; ComplexProperty&lt;TNestedComplexProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TComplexProperty,TNestedComplexProperty&gt;&gt; property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2&lt;!TEntity, !!TNestedComplexProperty&gt; ComplexProperty&lt;TNestedComplexProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TComplexProperty, !!TNestedComplexProperty&gt;&gt; property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function ComplexProperty(Of TNestedComplexProperty) (property As Expression(Of Func(Of TComplexProperty, TNestedComplexProperty))) As DbComplexPropertyEntry(Of TEntity, TNestedComplexProperty)" />
      <MemberSignature Language="F#" Value="member this.ComplexProperty : System.Linq.Expressions.Expression&lt;Func&lt;'ComplexProperty, 'NestedComplexProperty&gt;&gt; -&gt; System.Data.Entity.Infrastructure.DbComplexPropertyEntry&lt;'Entity, 'NestedComplexProperty (requires 'Entity : null)&gt;" Usage="dbComplexPropertyEntry.ComplexProperty property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames", Justification="Rule predates more fluent naming conventions.", MessageId="0#")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.DbComplexPropertyEntry&lt;TEntity,TNestedComplexProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNestedComplexProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="property" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TComplexProperty,TNestedComplexProperty&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNestedComplexProperty"> The type of the nested property. </typeparam>
        <param name="property"> An expression representing the nested property. </param>
        <summary>
            Gets an object that represents a nested complex property of this property.
            </summary>
        <returns> An object representing the nested property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplexProperty&lt;TNestedComplexProperty&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Infrastructure.DbComplexPropertyEntry&lt;TEntity,TNestedComplexProperty&gt; ComplexProperty&lt;TNestedComplexProperty&gt; (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2&lt;!TEntity, !!TNestedComplexProperty&gt; ComplexProperty&lt;TNestedComplexProperty&gt;(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ComplexProperty(Of TNestedComplexProperty) (propertyName As String) As DbComplexPropertyEntry(Of TEntity, TNestedComplexProperty)" />
      <MemberSignature Language="F#" Value="member this.ComplexProperty : string -&gt; System.Data.Entity.Infrastructure.DbComplexPropertyEntry&lt;'Entity, 'NestedComplexProperty (requires 'Entity : null)&gt;" Usage="dbComplexPropertyEntry.ComplexProperty propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.DbComplexPropertyEntry&lt;TEntity,TNestedComplexProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNestedComplexProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TNestedComplexProperty"> The type of the nested property. </typeparam>
        <param name="propertyName"> The name of the nested property. </param>
        <summary>
            Gets an object that represents a nested complex property of this property.
            </summary>
        <returns> An object representing the nested property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Data.Entity.Infrastructure.DbComplexPropertyEntry (System.Data.Entity.Infrastructure.DbComplexPropertyEntry&lt;TEntity,TComplexProperty&gt; entry);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Data.Entity.Infrastructure.DbComplexPropertyEntry op_Implicit(class System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2&lt;!TEntity, !TComplexProperty&gt; entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (entry As DbComplexPropertyEntry(Of TEntity, TComplexProperty)) As DbComplexPropertyEntry" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Data.Entity.Infrastructure.DbComplexPropertyEntry&lt;'Entity, 'ComplexProperty (requires 'Entity : null)&gt; -&gt; System.Data.Entity.Infrastructure.DbComplexPropertyEntry" Usage="System.Data.Entity.Infrastructure.DbComplexPropertyEntry&lt;'Entity, 'ComplexProperty (requires 'Entity : null)&gt;.op_Implicit entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2225:OperatorOverloadsHaveNamedAlternates", Justification="Intentionally just implicit to reduce API clutter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.DbComplexPropertyEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Data.Entity.Infrastructure.DbComplexPropertyEntry&lt;TEntity,TComplexProperty&gt;" />
      </Parameters>
      <Docs>
        <param name="entry">The object representing the property.</param>
        <summary>
            Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> class for
            the property represented by this object.
            </summary>
        <returns> A non-generic version. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Infrastructure.DbPropertyEntry Property (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.Infrastructure.DbPropertyEntry Property(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Property (propertyName As String) As DbPropertyEntry" />
      <MemberSignature Language="F#" Value="member this.Property : string -&gt; System.Data.Entity.Infrastructure.DbPropertyEntry" Usage="dbComplexPropertyEntry.Property propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.DbPropertyEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"> The name of the nested property. </param>
        <summary>
            Gets an object that represents a nested property of this property.
            This method can be used for both scalar or complex properties.
            </summary>
        <returns> An object representing the nested property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property&lt;TNestedProperty&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Infrastructure.DbPropertyEntry&lt;TEntity,TNestedProperty&gt; Property&lt;TNestedProperty&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TComplexProperty,TNestedProperty&gt;&gt; property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.Infrastructure.DbPropertyEntry`2&lt;!TEntity, !!TNestedProperty&gt; Property&lt;TNestedProperty&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TComplexProperty, !!TNestedProperty&gt;&gt; property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function Property(Of TNestedProperty) (property As Expression(Of Func(Of TComplexProperty, TNestedProperty))) As DbPropertyEntry(Of TEntity, TNestedProperty)" />
      <MemberSignature Language="F#" Value="member this.Property : System.Linq.Expressions.Expression&lt;Func&lt;'ComplexProperty, 'NestedProperty&gt;&gt; -&gt; System.Data.Entity.Infrastructure.DbPropertyEntry&lt;'Entity, 'NestedProperty (requires 'Entity : null)&gt;" Usage="dbComplexPropertyEntry.Property property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames", Justification="Rule predates more fluent naming conventions.", MessageId="0#")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.DbPropertyEntry&lt;TEntity,TNestedProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNestedProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="property" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TComplexProperty,TNestedProperty&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TNestedProperty"> The type of the nested property. </typeparam>
        <param name="property"> An expression representing the nested property. </param>
        <summary>
            Gets an object that represents a nested property of this property.
            This method can be used for both scalar or complex properties.
            </summary>
        <returns> An object representing the nested property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property&lt;TNestedProperty&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Entity.Infrastructure.DbPropertyEntry&lt;TEntity,TNestedProperty&gt; Property&lt;TNestedProperty&gt; (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Entity.Infrastructure.DbPropertyEntry`2&lt;!TEntity, !!TNestedProperty&gt; Property&lt;TNestedProperty&gt;(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Property(Of TNestedProperty) (propertyName As String) As DbPropertyEntry(Of TEntity, TNestedProperty)" />
      <MemberSignature Language="F#" Value="member this.Property : string -&gt; System.Data.Entity.Infrastructure.DbPropertyEntry&lt;'Entity, 'NestedProperty (requires 'Entity : null)&gt;" Usage="dbComplexPropertyEntry.Property propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.DbPropertyEntry&lt;TEntity,TNestedProperty&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TNestedProperty" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TNestedProperty"> The type of the nested property. </typeparam>
        <param name="propertyName"> The name of the nested property. </param>
        <summary>
            Gets an object that represents a nested property of this property.
            This method can be used for both scalar or complex properties.
            </summary>
        <returns> An object representing the nested property. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>