<Type Name="DbCompiledModel" FullName="System.Data.Entity.Infrastructure.DbCompiledModel">
  <TypeSignature Language="C#" Value="public class DbCompiledModel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbCompiledModel extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.DbCompiledModel" />
  <TypeSignature Language="VB.NET" Value="Public Class DbCompiledModel" />
  <TypeSignature Language="F#" Value="type DbCompiledModel = class" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            An immutable representation of an Entity Data Model (EDM) model that can be used to create an
            <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> or can be passed to the constructor of a <see cref="T:System.Data.Entity.DbContext" />.
            For increased performance, instances of this type should be cached and re-used to construct contexts.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateObjectContext&lt;TContext&gt;">
      <MemberSignature Language="C#" Value="public TContext CreateObjectContext&lt;TContext&gt; (System.Data.Common.DbConnection existingConnection) where TContext : System.Data.Entity.Core.Objects.ObjectContext;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TContext CreateObjectContext&lt;(class System.Data.Entity.Core.Objects.ObjectContext) TContext&gt;(class System.Data.Common.DbConnection existingConnection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObjectContext(Of TContext As ObjectContext) (existingConnection As DbConnection) As TContext" />
      <MemberSignature Language="F#" Value="member this.CreateObjectContext : System.Data.Common.DbConnection -&gt; 'Context (requires 'Context :&gt; System.Data.Entity.Core.Objects.ObjectContext)" Usage="dbCompiledModel.CreateObjectContext existingConnection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TContext</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContext">
          <Constraints>
            <BaseTypeName>System.Data.Entity.Core.Objects.ObjectContext</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="existingConnection" Type="System.Data.Common.DbConnection" />
      </Parameters>
      <Docs>
        <typeparam name="TContext"> The type of context to create. </typeparam>
        <param name="existingConnection"> An existing connection to a database for use by the context. </param>
        <summary>
            Creates an instance of ObjectContext or class derived from ObjectContext.  Note that an instance
            of DbContext can be created instead by using the appropriate DbContext constructor.
            If a derived ObjectContext is used, then it must have a public constructor with a single
            EntityConnection parameter.
            The connection passed is used by the ObjectContext created, but is not owned by the context.  The caller
            must dispose of the connection once the context has been disposed.
            </summary>
        <returns>The context.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>