<Type Name="TransactionContext" FullName="System.Data.Entity.Infrastructure.TransactionContext">
  <TypeSignature Language="C#" Value="public class TransactionContext : System.Data.Entity.DbContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TransactionContext extends System.Data.Entity.DbContext" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.TransactionContext" />
  <TypeSignature Language="VB.NET" Value="Public Class TransactionContext&#xA;Inherits DbContext" />
  <TypeSignature Language="F#" Value="type TransactionContext = class&#xA;    inherit DbContext" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Entity.DbContext</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This class is used by <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> to write and read transaction tracing information
            from the database.
            To customize the definition of the transaction table you can derive from
            this class and override <see cref="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)" />. Derived classes can be registered
            using <see cref="T:System.Data.Entity.DbConfiguration" />.
            </summary>
    <remarks>
            By default EF will poll the resolved <see cref="T:System.Data.Entity.Infrastructure.TransactionContext" /> to check wether the database schema is compatible and
            will try to modify it accordingly if it's not. To disable this check call
            <code>Database.SetInitializer&lt;TTransactionContext&gt;(null)</code> where TTransactionContext is the type of the resolved context.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionContext (System.Data.Common.DbConnection existingConnection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DbConnection existingConnection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionContext.#ctor(System.Data.Common.DbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (existingConnection As DbConnection)" />
      <MemberSignature Language="F#" Value="new System.Data.Entity.Infrastructure.TransactionContext : System.Data.Common.DbConnection -&gt; System.Data.Entity.Infrastructure.TransactionContext" Usage="new System.Data.Entity.Infrastructure.TransactionContext existingConnection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="existingConnection" Type="System.Data.Common.DbConnection" />
      </Parameters>
      <Docs>
        <param name="existingConnection">The connection used by the context for which the transactions will be recorded.</param>
        <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.TransactionContext" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnModelCreating">
      <MemberSignature Language="C#" Value="protected override void OnModelCreating (System.Data.Entity.DbModelBuilder modelBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnModelCreating(class System.Data.Entity.DbModelBuilder modelBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnModelCreating (modelBuilder As DbModelBuilder)" />
      <MemberSignature Language="F#" Value="override this.OnModelCreating : System.Data.Entity.DbModelBuilder -&gt; unit" Usage="transactionContext.OnModelCreating modelBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modelBuilder" Type="System.Data.Entity.DbModelBuilder" />
      </Parameters>
      <Docs>
        <param name="modelBuilder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Transactions">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.IDbSet&lt;System.Data.Entity.Infrastructure.TransactionRow&gt; Transactions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Entity.IDbSet`1&lt;class System.Data.Entity.Infrastructure.TransactionRow&gt; Transactions" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Infrastructure.TransactionContext.Transactions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Transactions As IDbSet(Of TransactionRow)" />
      <MemberSignature Language="F#" Value="member this.Transactions : System.Data.Entity.IDbSet&lt;System.Data.Entity.Infrastructure.TransactionRow&gt; with get, set" Usage="System.Data.Entity.Infrastructure.TransactionContext.Transactions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.IDbSet&lt;System.Data.Entity.Infrastructure.TransactionRow&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a <see cref="T:System.Data.Entity.DbSet`1" /> that can be used to read and write <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" /> instances.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>