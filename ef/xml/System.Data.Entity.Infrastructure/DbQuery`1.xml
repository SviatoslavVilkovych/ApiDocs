<Type Name="DbQuery&lt;TResult&gt;" FullName="System.Data.Entity.Infrastructure.DbQuery&lt;TResult&gt;">
  <TypeSignature Language="C#" Value="public class DbQuery&lt;TResult&gt; : System.Collections.Generic.IEnumerable&lt;TResult&gt;, System.ComponentModel.IListSource, System.Data.Entity.Infrastructure.IDbAsyncEnumerable&lt;TResult&gt;, System.Linq.IOrderedQueryable&lt;TResult&gt;, System.Linq.IQueryable&lt;TResult&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DbQuery`1&lt;TResult&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!TResult&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Data.Entity.Infrastructure.IDbAsyncEnumerable, class System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1&lt;!TResult&gt;, class System.Linq.IOrderedQueryable, class System.Linq.IOrderedQueryable`1&lt;!TResult&gt;, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TResult&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.DbQuery`1" />
  <TypeSignature Language="VB.NET" Value="Public Class DbQuery(Of TResult)&#xA;Implements IDbAsyncEnumerable(Of TResult), IEnumerable(Of TResult), IListSource, IOrderedQueryable(Of TResult), IQueryable(Of TResult)" />
  <TypeSignature Language="F#" Value="type DbQuery&lt;'Result&gt; = class&#xA;    interface IOrderedQueryable&lt;'Result&gt;&#xA;    interface IQueryable&lt;'Result&gt;&#xA;    interface seq&lt;'Result&gt;&#xA;    interface IOrderedQueryable&#xA;    interface IQueryable&#xA;    interface IEnumerable&#xA;    interface IListSource&#xA;    interface IDbAsyncEnumerable&lt;'Result&gt;&#xA;    interface IDbAsyncEnumerable" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TResult&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.IDbAsyncEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.IDbAsyncEnumerable&lt;TResult&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IOrderedQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IOrderedQueryable&lt;TResult&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;TResult&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification="Name is intentional")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplay()}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TResult"> The type of entity to query for. </typeparam>
    <summary>
            Represents a LINQ to Entities query against a DbContext.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsNoTracking">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.Infrastructure.DbQuery&lt;TResult&gt; AsNoTracking ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Infrastructure.DbQuery`1&lt;!TResult&gt; AsNoTracking() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AsNoTracking () As DbQuery(Of TResult)" />
      <MemberSignature Language="F#" Value="abstract member AsNoTracking : unit -&gt; System.Data.Entity.Infrastructure.DbQuery&lt;'Result&gt;&#xA;override this.AsNoTracking : unit -&gt; System.Data.Entity.Infrastructure.DbQuery&lt;'Result&gt;" Usage="dbQuery.AsNoTracking " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.DbQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext" />.
            </summary>
        <returns> A new query with NoTracking applied. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsStreaming">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.Infrastructure.DbQuery&lt;TResult&gt; AsStreaming ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Infrastructure.DbQuery`1&lt;!TResult&gt; AsStreaming() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbQuery`1.AsStreaming" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AsStreaming () As DbQuery(Of TResult)" />
      <MemberSignature Language="F#" Value="abstract member AsStreaming : unit -&gt; System.Data.Entity.Infrastructure.DbQuery&lt;'Result&gt;&#xA;override this.AsStreaming : unit -&gt; System.Data.Entity.Infrastructure.DbQuery&lt;'Result&gt;" Usage="dbQuery.AsStreaming " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Queries are now streaming by default unless a retrying ExecutionStrategy is used. Calling this method will have no effect.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.DbQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a new query that will stream the results instead of buffering.
            </summary>
        <returns> A new query with AsStreaming applied. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dbQuery.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dbQuery.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbQuery`1.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="dbQuery.GetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Include">
      <MemberSignature Language="C#" Value="public virtual System.Data.Entity.Infrastructure.DbQuery&lt;TResult&gt; Include (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Entity.Infrastructure.DbQuery`1&lt;!TResult&gt; Include(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Include (path As String) As DbQuery(Of TResult)" />
      <MemberSignature Language="F#" Value="abstract member Include : string -&gt; System.Data.Entity.Infrastructure.DbQuery&lt;'Result&gt;&#xA;override this.Include : string -&gt; System.Data.Entity.Infrastructure.DbQuery&lt;'Result&gt;" Usage="dbQuery.Include path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.DbQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"> The dot-separated list of related objects to return in the query results. </param>
        <summary>
            Specifies the related objects to include in the query results.
            </summary>
        <returns>
            A new <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> with the defined query path.
            </returns>
        <remarks>
            Paths are all-inclusive. For example, if an include call indicates Include("Orders.OrderLines"), not only will
            OrderLines be included, but also Orders.  When you call the Include method, the query path is only valid on
            the returned instance of the DbQuery&lt;T&gt;. Other instances of DbQuery&lt;T&gt; and the object context itself are not affected.
            Because the Include method returns the query object, you can call this method multiple times on an DbQuery&lt;T&gt; to
            specify multiple paths for the query.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Data.Entity.Infrastructure.DbQuery (System.Data.Entity.Infrastructure.DbQuery&lt;TResult&gt; entry);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Data.Entity.Infrastructure.DbQuery op_Implicit(class System.Data.Entity.Infrastructure.DbQuery`1&lt;!TResult&gt; entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (entry As DbQuery(Of TResult)) As DbQuery" />
      <MemberSignature Language="F#" Value="static member op_Implicit : System.Data.Entity.Infrastructure.DbQuery&lt;'Result&gt; -&gt; System.Data.Entity.Infrastructure.DbQuery" Usage="System.Data.Entity.Infrastructure.DbQuery&lt;'Result&gt;.op_Implicit entry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2225:OperatorOverloadsHaveNamedAlternates", Justification="Intentionally just implicit to reduce API clutter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.DbQuery</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Data.Entity.Infrastructure.DbQuery&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <param name="entry">The query.</param>
        <summary>
            Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> class for this query.
            </summary>
        <returns> A non-generic version. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sql">
      <MemberSignature Language="C#" Value="public string Sql { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Sql" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Infrastructure.DbQuery`1.Sql" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Sql As String" />
      <MemberSignature Language="F#" Value="member this.Sql : string" Usage="System.Data.Entity.Infrastructure.DbQuery&lt;'Result&gt;.Sql" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a <see cref="T:System.String" /> representation of the underlying query.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;TResult&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;TResult&gt; IEnumerable&lt;TResult&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TResult&gt; System.Collections.Generic.IEnumerable&lt;TResult&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable&lt;TResult&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of TResult) Implements IEnumerable(Of TResult).GetEnumerator" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> which when enumerated will execute the query against the database.
            </summary>
        <returns> The query results. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> which when enumerated will execute the query against the database.
            </summary>
        <returns> The query results. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns <c>false</c>.
            </summary>
        <value>
          <c>false</c> .
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Throws an exception indicating that binding directly to a store query is not supported.
            Instead populate a DbSet with data, for example by using the Load extension method, and
            then bind to local data.  For WPF bind to DbSet.Local.  For Windows Forms bind to
            DbSet.Local.ToBindingList().
            </summary>
        <returns> Never returns; always throws. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator">
      <MemberSignature Language="C#" Value="System.Data.Entity.Infrastructure.IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetAsyncEnumerator () As IDbAsyncEnumerator Implements IDbAsyncEnumerable.GetAsyncEnumerator" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.IDbAsyncEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns an <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" /> which when enumerated will execute the query against the database.
            </summary>
        <returns> The query results. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Entity.Infrastructure.IDbAsyncEnumerable&lt;TResult&gt;.GetAsyncEnumerator">
      <MemberSignature Language="C#" Value="System.Data.Entity.Infrastructure.IDbAsyncEnumerator&lt;TResult&gt; IDbAsyncEnumerable&lt;TResult&gt;.GetAsyncEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1&lt;!TResult&gt; System.Data.Entity.Infrastructure.IDbAsyncEnumerable&lt;TResult&gt;.GetAsyncEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable&lt;TResult&gt;#GetAsyncEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetAsyncEnumerator () As IDbAsyncEnumerator(Of TResult) Implements IDbAsyncEnumerable(Of TResult).GetAsyncEnumerator" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1.GetAsyncEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.IDbAsyncEnumerator&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns an <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> which when enumerated will execute the query against the database.
            </summary>
        <returns> The query results. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.ElementType">
      <MemberSignature Language="C#" Value="Type System.Linq.IQueryable.ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Linq.IQueryable.ElementType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ElementType As Type Implements IQueryable.ElementType" />
      <MemberSignature Language="F#" Usage="System.Linq.IQueryable.ElementType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.ElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The IQueryable element type.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Expression">
      <MemberSignature Language="C#" Value="System.Linq.Expressions.Expression System.Linq.IQueryable.Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression System.Linq.IQueryable.Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Expression As Expression Implements IQueryable.Expression" />
      <MemberSignature Language="F#" Usage="System.Linq.IQueryable.Expression" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.Expression</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The IQueryable LINQ Expression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Provider">
      <MemberSignature Language="C#" Value="System.Linq.IQueryProvider System.Linq.IQueryable.Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider System.Linq.IQueryable.Provider" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Provider As IQueryProvider Implements IQueryable.Provider" />
      <MemberSignature Language="F#" Usage="System.Linq.IQueryable.Provider" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Linq.IQueryable.Provider</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The IQueryable provider.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dbQuery.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Returns a <see cref="T:System.String" /> representation of the underlying query.
            </summary>
        <returns> The query string. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>