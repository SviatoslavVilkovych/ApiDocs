<Type Name="IDbConnectionInterceptor" FullName="System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor">
  <TypeSignature Language="C#" Value="public interface IDbConnectionInterceptor : System.Data.Entity.Infrastructure.Interception.IDbInterceptor" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDbConnectionInterceptor implements class System.Data.Entity.Infrastructure.Interception.IDbInterceptor" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDbConnectionInterceptor&#xA;Implements IDbInterceptor" />
  <TypeSignature Language="F#" Value="type IDbConnectionInterceptor = interface&#xA;    interface IDbInterceptor" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.Interception.IDbInterceptor</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            An object that implements this interface can be registered with <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> to
            receive notifications when Entity Framework performs operations on a <see cref="T:System.Data.Common.DbTransaction" />.
            </summary>
    <remarks>
            Interceptors can also be registered in the config file of the application.
            See http://go.microsoft.com/fwlink/?LinkId=260883 for more information about Entity Framework configuration.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="BeganTransaction">
      <MemberSignature Language="C#" Value="public void BeganTransaction (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeganTransaction(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeganTransaction (connection As DbConnection, interceptionContext As BeginTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member BeganTransaction : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext -&gt; unit" Usage="iDbConnectionInterceptor.BeganTransaction (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection that began the transaction.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called after <see cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)" /> is invoked.
            The transaction used by Entity Framework can be changed by setting
            <see cref="P:System.Data.Entity.Infrastructure.Interception.MutableInterceptionContext`1.Result" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginningTransaction">
      <MemberSignature Language="C#" Value="public void BeginningTransaction (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginningTransaction(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginningTransaction (connection As DbConnection, interceptionContext As BeginTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member BeginningTransaction : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext -&gt; unit" Usage="iDbConnectionInterceptor.BeginningTransaction (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection beginning the transaction.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called before <see cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)" /> is invoked.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Closed">
      <MemberSignature Language="C#" Value="public void Closed (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Closed(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Closed (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Closed : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext -&gt; unit" Usage="iDbConnectionInterceptor.Closed (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection that was closed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called after <see cref="M:System.Data.Common.DbConnection.Close" /> is invoked.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Closing">
      <MemberSignature Language="C#" Value="public void Closing (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Closing(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Closing (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Closing : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext -&gt; unit" Usage="iDbConnectionInterceptor.Closing (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection being closed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called before <see cref="M:System.Data.Common.DbConnection.Close" /> is invoked.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionStringGetting">
      <MemberSignature Language="C#" Value="public void ConnectionStringGetting (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionStringGetting(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ConnectionStringGetting (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member ConnectionStringGetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit" Usage="iDbConnectionInterceptor.ConnectionStringGetting (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.ConnectionString" /> is retrieved.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionStringGot">
      <MemberSignature Language="C#" Value="public void ConnectionStringGot (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionStringGot(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ConnectionStringGot (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member ConnectionStringGot : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit" Usage="iDbConnectionInterceptor.ConnectionStringGot (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.ConnectionString" /> is retrieved.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionStringSet">
      <MemberSignature Language="C#" Value="public void ConnectionStringSet (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionStringSet(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ConnectionStringSet (connection As DbConnection, interceptionContext As DbConnectionPropertyInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member ConnectionStringSet : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext&lt;string&gt; -&gt; unit" Usage="iDbConnectionInterceptor.ConnectionStringSet (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.ConnectionString" /> is set.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionStringSetting">
      <MemberSignature Language="C#" Value="public void ConnectionStringSetting (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionStringSetting(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ConnectionStringSetting (connection As DbConnection, interceptionContext As DbConnectionPropertyInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member ConnectionStringSetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext&lt;string&gt; -&gt; unit" Usage="iDbConnectionInterceptor.ConnectionStringSetting (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.ConnectionString" /> is set.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeoutGetting">
      <MemberSignature Language="C#" Value="public void ConnectionTimeoutGetting (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;int&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionTimeoutGetting(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;int32&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ConnectionTimeoutGetting (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of Integer))" />
      <MemberSignature Language="F#" Value="abstract member ConnectionTimeoutGetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;int&gt; -&gt; unit" Usage="iDbConnectionInterceptor.ConnectionTimeoutGetting (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.ConnectionTimeout" /> is retrieved.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeoutGot">
      <MemberSignature Language="C#" Value="public void ConnectionTimeoutGot (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;int&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectionTimeoutGot(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;int32&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ConnectionTimeoutGot (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of Integer))" />
      <MemberSignature Language="F#" Value="abstract member ConnectionTimeoutGot : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;int&gt; -&gt; unit" Usage="iDbConnectionInterceptor.ConnectionTimeoutGot (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.ConnectionTimeout" /> is retrieved.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DatabaseGetting">
      <MemberSignature Language="C#" Value="public void DatabaseGetting (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DatabaseGetting(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub DatabaseGetting (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member DatabaseGetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit" Usage="iDbConnectionInterceptor.DatabaseGetting (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.Database" /> is retrieved.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DatabaseGot">
      <MemberSignature Language="C#" Value="public void DatabaseGot (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DatabaseGot(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub DatabaseGot (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member DatabaseGot : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit" Usage="iDbConnectionInterceptor.DatabaseGot (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.Database" /> is retrieved.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSourceGetting">
      <MemberSignature Language="C#" Value="public void DataSourceGetting (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DataSourceGetting(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub DataSourceGetting (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member DataSourceGetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit" Usage="iDbConnectionInterceptor.DataSourceGetting (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.DataSource" /> is retrieved.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSourceGot">
      <MemberSignature Language="C#" Value="public void DataSourceGot (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DataSourceGot(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub DataSourceGot (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member DataSourceGot : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit" Usage="iDbConnectionInterceptor.DataSourceGot (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.DataSource" /> is retrieved.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Disposed">
      <MemberSignature Language="C#" Value="public void Disposed (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Disposed(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Disposed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Disposed (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Disposed : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext -&gt; unit" Usage="iDbConnectionInterceptor.Disposed (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection that was disposed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called after <see cref="M:System.ComponentModel.Component.Dispose" /> is invoked.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Disposing">
      <MemberSignature Language="C#" Value="public void Disposing (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Disposing(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Disposing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Disposing (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Disposing : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext -&gt; unit" Usage="iDbConnectionInterceptor.Disposing (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection being disposed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called before <see cref="M:System.ComponentModel.Component.Dispose" /> is invoked.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistedTransaction">
      <MemberSignature Language="C#" Value="public void EnlistedTransaction (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnlistedTransaction(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnlistedTransaction (connection As DbConnection, interceptionContext As EnlistTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member EnlistedTransaction : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext -&gt; unit" Usage="iDbConnectionInterceptor.EnlistedTransaction (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called after <see cref="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)" /> is invoked.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistingTransaction">
      <MemberSignature Language="C#" Value="public void EnlistingTransaction (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnlistingTransaction(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnlistingTransaction (connection As DbConnection, interceptionContext As EnlistTransactionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member EnlistingTransaction : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext -&gt; unit" Usage="iDbConnectionInterceptor.EnlistingTransaction (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called before <see cref="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)" /> is invoked.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Opened">
      <MemberSignature Language="C#" Value="public void Opened (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Opened(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Opened (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Opened : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext -&gt; unit" Usage="iDbConnectionInterceptor.Opened (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection that was opened.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called after <see cref="M:System.Data.Common.DbConnection.Open" /> or its async counterpart is invoked.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Opening">
      <MemberSignature Language="C#" Value="public void Opening (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Opening(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Opening (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member Opening : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext -&gt; unit" Usage="iDbConnectionInterceptor.Opening (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="connection">The connection being opened.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called before <see cref="M:System.Data.Common.DbConnection.Open" /> or its async counterpart is invoked.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerVersionGetting">
      <MemberSignature Language="C#" Value="public void ServerVersionGetting (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ServerVersionGetting(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ServerVersionGetting (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member ServerVersionGetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit" Usage="iDbConnectionInterceptor.ServerVersionGetting (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.ServerVersion" /> is retrieved.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerVersionGot">
      <MemberSignature Language="C#" Value="public void ServerVersionGot (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ServerVersionGot(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;string&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ServerVersionGot (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of String))" />
      <MemberSignature Language="F#" Value="abstract member ServerVersionGot : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;string&gt; -&gt; unit" Usage="iDbConnectionInterceptor.ServerVersionGot (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.ServerVersion" /> is retrieved.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateGetting">
      <MemberSignature Language="C#" Value="public void StateGetting (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.Data.ConnectionState&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StateGetting(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;valuetype System.Data.ConnectionState&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})" />
      <MemberSignature Language="VB.NET" Value="Public Sub StateGetting (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of ConnectionState))" />
      <MemberSignature Language="F#" Value="abstract member StateGetting : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.Data.ConnectionState&gt; -&gt; unit" Usage="iDbConnectionInterceptor.StateGetting (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.Data.ConnectionState&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called before <see cref="P:System.Data.Common.DbConnection.State" /> is retrieved.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateGot">
      <MemberSignature Language="C#" Value="public void StateGot (System.Data.Common.DbConnection connection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.Data.ConnectionState&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StateGot(class System.Data.Common.DbConnection connection, class System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext`1&lt;valuetype System.Data.ConnectionState&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})" />
      <MemberSignature Language="VB.NET" Value="Public Sub StateGot (connection As DbConnection, interceptionContext As DbConnectionInterceptionContext(Of ConnectionState))" />
      <MemberSignature Language="F#" Value="abstract member StateGot : System.Data.Common.DbConnection * System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.Data.ConnectionState&gt; -&gt; unit" Usage="iDbConnectionInterceptor.StateGot (connection, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.Common.DbConnection" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&lt;System.Data.ConnectionState&gt;" />
      </Parameters>
      <Docs>
        <param name="connection">The connection.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            Called after <see cref="P:System.Data.Common.DbConnection.State" /> is retrieved.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>