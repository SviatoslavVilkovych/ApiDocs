<Type Name="DatabaseLogger" FullName="System.Data.Entity.Infrastructure.Interception.DatabaseLogger">
  <TypeSignature Language="C#" Value="public class DatabaseLogger : IDisposable, System.Data.Entity.Infrastructure.Interception.IDbConfigurationInterceptor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DatabaseLogger extends System.Object implements class System.Data.Entity.Infrastructure.Interception.IDbConfigurationInterceptor, class System.Data.Entity.Infrastructure.Interception.IDbInterceptor, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.Interception.DatabaseLogger" />
  <TypeSignature Language="VB.NET" Value="Public Class DatabaseLogger&#xA;Implements IDbConfigurationInterceptor, IDisposable" />
  <TypeSignature Language="F#" Value="type DatabaseLogger = class&#xA;    interface IDisposable&#xA;    interface IDbConfigurationInterceptor&#xA;    interface IDbInterceptor" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.Interception.IDbConfigurationInterceptor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.Interception.IDbInterceptor</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A simple logger for logging SQL and other database operations to the console or a file.
            A logger can be registered in code or in the application's web.config /app.config file.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DatabaseLogger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Creates a new logger that will send log output to the console.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DatabaseLogger (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="F#" Value="new System.Data.Entity.Infrastructure.Interception.DatabaseLogger : string -&gt; System.Data.Entity.Infrastructure.Interception.DatabaseLogger" Usage="new System.Data.Entity.Infrastructure.Interception.DatabaseLogger path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">A path to the file to which log output will be written.</param>
        <summary>
            Creates a new logger that will send log output to a file. If the file already exists then
            it is overwritten.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DatabaseLogger (string path, bool append);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, append As Boolean)" />
      <MemberSignature Language="F#" Value="new System.Data.Entity.Infrastructure.Interception.DatabaseLogger : string * bool -&gt; System.Data.Entity.Infrastructure.Interception.DatabaseLogger" Usage="new System.Data.Entity.Infrastructure.Interception.DatabaseLogger (path, append)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">A path to the file to which log output will be written.</param>
        <param name="append">True to append data to the file if it exists; false to overwrite the file.</param>
        <summary>
            Creates a new logger that will send log output to a file.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="databaseLogger.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Stops logging and closes the underlying file if output is being written to a file.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="databaseLogger.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
            True to release both managed and unmanaged resources; False to release only unmanaged resources.
            </param>
        <summary>
            Stops logging and closes the underlying file if output is being written to a file.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartLogging">
      <MemberSignature Language="C#" Value="public void StartLogging ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartLogging() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.StartLogging" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartLogging ()" />
      <MemberSignature Language="F#" Value="member this.StartLogging : unit -&gt; unit" Usage="databaseLogger.StartLogging " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Starts logging. This method is a no-op if logging is already started.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopLogging">
      <MemberSignature Language="C#" Value="public void StopLogging ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopLogging() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.StopLogging" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopLogging ()" />
      <MemberSignature Language="F#" Value="member this.StopLogging : unit -&gt; unit" Usage="databaseLogger.StopLogging " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Stops logging. This method is a no-op if logging is not started.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Entity.Infrastructure.Interception.IDbConfigurationInterceptor.Loaded">
      <MemberSignature Language="C#" Value="void IDbConfigurationInterceptor.Loaded (System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs loadedEventArgs, System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Entity.Infrastructure.Interception.IDbConfigurationInterceptor.Loaded(class System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs loadedEventArgs, class System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.DatabaseLogger.System#Data#Entity#Infrastructure#Interception#IDbConfigurationInterceptor#Loaded(System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs,System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Sub Loaded (loadedEventArgs As DbConfigurationLoadedEventArgs, interceptionContext As DbConfigurationInterceptionContext) Implements IDbConfigurationInterceptor.Loaded" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.Interception.IDbConfigurationInterceptor.Loaded(System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs,System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loadedEventArgs" Type="System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbConfigurationInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="loadedEventArgs">Arguments to the event that this interceptor mirrors.</param>
        <param name="interceptionContext">Contextual information about the event.</param>
        <summary>
            Called to start logging during Entity Framework initialization when this logger is registered.
            as an <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor" />. 
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>