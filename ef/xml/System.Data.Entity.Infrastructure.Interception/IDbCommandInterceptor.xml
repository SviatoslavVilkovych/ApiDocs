<Type Name="IDbCommandInterceptor" FullName="System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor">
  <TypeSignature Language="C#" Value="public interface IDbCommandInterceptor : System.Data.Entity.Infrastructure.Interception.IDbInterceptor" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDbCommandInterceptor implements class System.Data.Entity.Infrastructure.Interception.IDbInterceptor" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDbCommandInterceptor&#xA;Implements IDbInterceptor" />
  <TypeSignature Language="F#" Value="type IDbCommandInterceptor = interface&#xA;    interface IDbInterceptor" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.Interception.IDbInterceptor</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            An object that implements this interface can be registered with <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> to
            receive notifications when Entity Framework executes commands.
            </summary>
    <remarks>
            Interceptors can also be registered in the config file of the application.
            See http://go.microsoft.com/fwlink/?LinkId=260883 for more information about Entity Framework configuration.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="NonQueryExecuted">
      <MemberSignature Language="C#" Value="public void NonQueryExecuted (System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&lt;int&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NonQueryExecuted(class System.Data.Common.DbCommand command, class System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1&lt;int32&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Sub NonQueryExecuted (command As DbCommand, interceptionContext As DbCommandInterceptionContext(Of Integer))" />
      <MemberSignature Language="F#" Value="abstract member NonQueryExecuted : System.Data.Common.DbCommand * System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&lt;int&gt; -&gt; unit" Usage="iDbCommandInterceptor.NonQueryExecuted (command, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="command">The command being executed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            This method is called after a call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />  or
            one of its async counterparts is made. The result used by Entity Framework can be changed by setting
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Result" />.
            </summary>
        <remarks>
            For async operations this method is not called until after the async task has completed
            or failed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NonQueryExecuting">
      <MemberSignature Language="C#" Value="public void NonQueryExecuting (System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&lt;int&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NonQueryExecuting(class System.Data.Common.DbCommand command, class System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1&lt;int32&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Sub NonQueryExecuting (command As DbCommand, interceptionContext As DbCommandInterceptionContext(Of Integer))" />
      <MemberSignature Language="F#" Value="abstract member NonQueryExecuting : System.Data.Common.DbCommand * System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&lt;int&gt; -&gt; unit" Usage="iDbCommandInterceptor.NonQueryExecuting (command, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="command">The command being executed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            This method is called before a call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" /> or
            one of its async counterparts is made.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderExecuted">
      <MemberSignature Language="C#" Value="public void ReaderExecuted (System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&lt;System.Data.Common.DbDataReader&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReaderExecuted(class System.Data.Common.DbCommand command, class System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1&lt;class System.Data.Common.DbDataReader&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReaderExecuted (command As DbCommand, interceptionContext As DbCommandInterceptionContext(Of DbDataReader))" />
      <MemberSignature Language="F#" Value="abstract member ReaderExecuted : System.Data.Common.DbCommand * System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&lt;System.Data.Common.DbDataReader&gt; -&gt; unit" Usage="iDbCommandInterceptor.ReaderExecuted (command, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&lt;System.Data.Common.DbDataReader&gt;" />
      </Parameters>
      <Docs>
        <param name="command">The command being executed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            This method is called after a call to <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)" /> or
            one of its async counterparts is made. The result used by Entity Framework can be changed by setting
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Result" />.
            </summary>
        <remarks>
            For async operations this method is not called until after the async task has completed
            or failed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderExecuting">
      <MemberSignature Language="C#" Value="public void ReaderExecuting (System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&lt;System.Data.Common.DbDataReader&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReaderExecuting(class System.Data.Common.DbCommand command, class System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1&lt;class System.Data.Common.DbDataReader&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Data.Common.DbDataReader})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReaderExecuting (command As DbCommand, interceptionContext As DbCommandInterceptionContext(Of DbDataReader))" />
      <MemberSignature Language="F#" Value="abstract member ReaderExecuting : System.Data.Common.DbCommand * System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&lt;System.Data.Common.DbDataReader&gt; -&gt; unit" Usage="iDbCommandInterceptor.ReaderExecuting (command, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&lt;System.Data.Common.DbDataReader&gt;" />
      </Parameters>
      <Docs>
        <param name="command">The command being executed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            This method is called before a call to <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)" /> or
            one of its async counterparts is made.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScalarExecuted">
      <MemberSignature Language="C#" Value="public void ScalarExecuted (System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&lt;object&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScalarExecuted(class System.Data.Common.DbCommand command, class System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1&lt;object&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuted(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScalarExecuted (command As DbCommand, interceptionContext As DbCommandInterceptionContext(Of Object))" />
      <MemberSignature Language="F#" Value="abstract member ScalarExecuted : System.Data.Common.DbCommand * System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&lt;obj&gt; -&gt; unit" Usage="iDbCommandInterceptor.ScalarExecuted (command, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&lt;System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="command">The command being executed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            This method is called after a call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" /> or
            one of its async counterparts is made. The result used by Entity Framework can be changed by setting
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1.Result" />.
            </summary>
        <remarks>
            For async operations this method is not called until after the async task has completed
            or failed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScalarExecuting">
      <MemberSignature Language="C#" Value="public void ScalarExecuting (System.Data.Common.DbCommand command, System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&lt;object&gt; interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScalarExecuting(class System.Data.Common.DbCommand command, class System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext`1&lt;object&gt; interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext{System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScalarExecuting (command As DbCommand, interceptionContext As DbCommandInterceptionContext(Of Object))" />
      <MemberSignature Language="F#" Value="abstract member ScalarExecuting : System.Data.Common.DbCommand * System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&lt;obj&gt; -&gt; unit" Usage="iDbCommandInterceptor.ScalarExecuting (command, interceptionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbCommandInterceptionContext&lt;System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="command">The command being executed.</param>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            This method is called before a call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" /> or
            one of its async counterparts is made.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>