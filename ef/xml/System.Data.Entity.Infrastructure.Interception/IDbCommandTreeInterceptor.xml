<Type Name="IDbCommandTreeInterceptor" FullName="System.Data.Entity.Infrastructure.Interception.IDbCommandTreeInterceptor">
  <TypeSignature Language="C#" Value="public interface IDbCommandTreeInterceptor : System.Data.Entity.Infrastructure.Interception.IDbInterceptor" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDbCommandTreeInterceptor implements class System.Data.Entity.Infrastructure.Interception.IDbInterceptor" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.Interception.IDbCommandTreeInterceptor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDbCommandTreeInterceptor&#xA;Implements IDbInterceptor" />
  <TypeSignature Language="F#" Value="type IDbCommandTreeInterceptor = interface&#xA;    interface IDbInterceptor" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.Interception.IDbInterceptor</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            An object that implements this interface can be registered with <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> to
            receive notifications when Entity Framework creates <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> command trees.
            </summary>
    <remarks>
            Interceptors can also be registered in the config file of the application.
            See http://go.microsoft.com/fwlink/?LinkId=260883 for more information about Entity Framework configuration.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="TreeCreated">
      <MemberSignature Language="C#" Value="public void TreeCreated (System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext interceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TreeCreated(class System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext interceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.Interception.IDbCommandTreeInterceptor.TreeCreated(System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TreeCreated (interceptionContext As DbCommandTreeInterceptionContext)" />
      <MemberSignature Language="F#" Value="abstract member TreeCreated : System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext -&gt; unit" Usage="iDbCommandTreeInterceptor.TreeCreated interceptionContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interceptionContext" Type="System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext" />
      </Parameters>
      <Docs>
        <param name="interceptionContext">Contextual information associated with the call.</param>
        <summary>
            This method is called after a new <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> has been created.
            The tree that is used after interception can be changed by setting
            <see cref="P:System.Data.Entity.Infrastructure.Interception.DbCommandTreeInterceptionContext.Result" /> while intercepting.
            </summary>
        <remarks>
            Command trees are created for both queries and insert/update/delete commands. However, query
            command trees are cached by model which means that command tree creation only happens the
            first time a query is executed and this notification will only happen at that time
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>