<Type Name="ObjectContextOptions" FullName="System.Data.Entity.Core.Objects.ObjectContextOptions">
  <TypeSignature Language="C#" Value="public sealed class ObjectContextOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ObjectContextOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Core.Objects.ObjectContextOptions" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ObjectContextOptions" />
  <TypeSignature Language="F#" Value="type ObjectContextOptions = class" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Defines options that affect the behavior of the ObjectContext.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="EnsureTransactionsForFunctionsAndCommands">
      <MemberSignature Language="C#" Value="public bool EnsureTransactionsForFunctionsAndCommands { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnsureTransactionsForFunctionsAndCommands" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.ObjectContextOptions.EnsureTransactionsForFunctionsAndCommands" />
      <MemberSignature Language="VB.NET" Value="Public Property EnsureTransactionsForFunctionsAndCommands As Boolean" />
      <MemberSignature Language="F#" Value="member this.EnsureTransactionsForFunctionsAndCommands : bool with get, set" Usage="System.Data.Entity.Core.Objects.ObjectContextOptions.EnsureTransactionsForFunctionsAndCommands" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the value that determines whether SQL functions and commands should be always executed in a transaction.
            </summary>
        <value>
            The default transactional behavior.
            </value>
        <remarks>
            This flag determines whether a new transaction will be started when methods such as <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])" />
            and <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])" /> are executed outside of a transaction.
            Note that this does not change the behavior of <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LazyLoadingEnabled">
      <MemberSignature Language="C#" Value="public bool LazyLoadingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LazyLoadingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.ObjectContextOptions.LazyLoadingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property LazyLoadingEnabled As Boolean" />
      <MemberSignature Language="F#" Value="member this.LazyLoadingEnabled : bool with get, set" Usage="System.Data.Entity.Core.Objects.ObjectContextOptions.LazyLoadingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean value that determines whether related objects are loaded automatically when a navigation property is accessed.</summary>
        <value>true if lazy loading is enabled; otherwise, false.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProxyCreationEnabled">
      <MemberSignature Language="C#" Value="public bool ProxyCreationEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProxyCreationEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.ObjectContextOptions.ProxyCreationEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property ProxyCreationEnabled As Boolean" />
      <MemberSignature Language="F#" Value="member this.ProxyCreationEnabled : bool with get, set" Usage="System.Data.Entity.Core.Objects.ObjectContextOptions.ProxyCreationEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean value that determines whether proxy instances are created for custom data classes that are persistence ignorant.</summary>
        <value>true if proxies are created; otherwise, false. The default value is true.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseConsistentNullReferenceBehavior">
      <MemberSignature Language="C#" Value="public bool UseConsistentNullReferenceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseConsistentNullReferenceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseConsistentNullReferenceBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property UseConsistentNullReferenceBehavior As Boolean" />
      <MemberSignature Language="F#" Value="member this.UseConsistentNullReferenceBehavior : bool with get, set" Usage="System.Data.Entity.Core.Objects.ObjectContextOptions.UseConsistentNullReferenceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean value that determines whether to use the consistent NullReference behavior.</summary>
        <value>true if the consistent NullReference behavior should be used; otherwise, false.</value>
        <remarks>
            If this flag is set to false then setting the Value property of the <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> for an
            FK relationship to null when it is already null will have no effect. When this flag is set to true, then
            setting the value to null will always cause the FK to be nulled and the relationship to be deleted
            even if the value is currently null. The default value is false when using ObjectContext and true
            when using DbContext.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseCSharpNullComparisonBehavior">
      <MemberSignature Language="C#" Value="public bool UseCSharpNullComparisonBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCSharpNullComparisonBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseCSharpNullComparisonBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCSharpNullComparisonBehavior As Boolean" />
      <MemberSignature Language="F#" Value="member this.UseCSharpNullComparisonBehavior : bool with get, set" Usage="System.Data.Entity.Core.Objects.ObjectContextOptions.UseCSharpNullComparisonBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean value that determines whether to use the C# NullComparison behavior.</summary>
        <value>true if the C# NullComparison behavior should be used; otherwise, false.</value>
        <remarks>
            This flag determines whether C# behavior should be exhibited when comparing null values in LinqToEntities.
            If this flag is set, then any equality comparison between two operands, both of which are potentially
            nullable, will be rewritten to show C# null comparison semantics. As an example:
            (operand1 = operand2) will be rewritten as
            (((operand1 = operand2) AND NOT (operand1 IS NULL OR operand2 IS NULL)) || (operand1 IS NULL &amp;&amp; operand2 IS NULL))
            The default value is false when using <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLegacyPreserveChangesBehavior">
      <MemberSignature Language="C#" Value="public bool UseLegacyPreserveChangesBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseLegacyPreserveChangesBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property UseLegacyPreserveChangesBehavior As Boolean" />
      <MemberSignature Language="F#" Value="member this.UseLegacyPreserveChangesBehavior : bool with get, set" Usage="System.Data.Entity.Core.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean value that determines whether to use the legacy PreserveChanges behavior.</summary>
        <value>true if the legacy PreserveChanges behavior should be used; otherwise, false.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>