<Type Name="ObjectResult&lt;T&gt;" FullName="System.Data.Entity.Core.Objects.ObjectResult&lt;T&gt;">
  <TypeSignature Language="C#" Value="public class ObjectResult&lt;T&gt; : System.Data.Entity.Core.Objects.ObjectResult, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Data.Entity.Infrastructure.IDbAsyncEnumerable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectResult`1&lt;T&gt; extends System.Data.Entity.Core.Objects.ObjectResult implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Data.Entity.Infrastructure.IDbAsyncEnumerable, class System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Core.Objects.ObjectResult`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectResult(Of T)&#xA;Inherits ObjectResult&#xA;Implements IDbAsyncEnumerable(Of T), IEnumerable(Of T)" />
  <TypeSignature Language="F#" Value="type ObjectResult&lt;'T&gt; = class&#xA;    inherit ObjectResult&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IDbAsyncEnumerable&lt;'T&gt;&#xA;    interface IDbAsyncEnumerable" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Entity.Core.Objects.ObjectResult</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.IDbAsyncEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.IDbAsyncEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">The type of the result.</typeparam>
    <summary>
            This class represents the result of the <see cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)" /> method.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ObjectResult ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectResult`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
                This constructor is intended only for use when creating test doubles that will override members
                with mocked or faked behavior. Use of this constructor for other purposes may result in unexpected
                behavior including but not limited to throwing <see cref="T:System.NullReferenceException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectResult`1.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="objectResult.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">true to release managed and unmanaged resources; false to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> and optionally releases the managed resources.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementType">
      <MemberSignature Language="C#" Value="public override Type ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ElementType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Entity.Core.Objects.ObjectResult`1.ElementType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ElementType As Type" />
      <MemberSignature Language="F#" Value="member this.ElementType : Type" Usage="System.Data.Entity.Core.Objects.ObjectResult&lt;'T&gt;.ElementType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the type of the <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.
            </summary>
        <value>
            A <see cref="T:System.Type" /> that is the type of the <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectResult`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IEnumerator(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="objectResult.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through the query results.</summary>
        <returns>An enumerator that iterates through the query results.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Entity.Infrastructure.IDbAsyncEnumerable&lt;T&gt;.GetAsyncEnumerator">
      <MemberSignature Language="C#" Value="System.Data.Entity.Infrastructure.IDbAsyncEnumerator&lt;T&gt; IDbAsyncEnumerable&lt;T&gt;.GetAsyncEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1&lt;!T&gt; System.Data.Entity.Infrastructure.IDbAsyncEnumerable&lt;T&gt;.GetAsyncEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Core.Objects.ObjectResult`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable&lt;T&gt;#GetAsyncEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetAsyncEnumerator () As IDbAsyncEnumerator(Of T) Implements IDbAsyncEnumerable(Of T).GetAsyncEnumerator" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1.GetAsyncEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Entity.Infrastructure.IDbAsyncEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>