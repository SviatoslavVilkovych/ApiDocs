<Type Name="SingletonDependencyResolver&lt;T&gt;" FullName="System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver&lt;T&gt;">
  <TypeSignature Language="C#" Value="public class SingletonDependencyResolver&lt;T&gt; : System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver where T : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SingletonDependencyResolver`1&lt;class T&gt; extends System.Object implements class System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1" />
  <TypeSignature Language="VB.NET" Value="Public Class SingletonDependencyResolver(Of T)&#xA;Implements IDbDependencyResolver" />
  <TypeSignature Language="F#" Value="type SingletonDependencyResolver&lt;'T (requires 'T : null)&gt; = class&#xA;    interface IDbDependencyResolver" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"> The type that defines the contract for the dependency that will be resolved. </typeparam>
    <summary>
            Implements <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> to resolve a dependency such that it always returns
            the same instance.
            </summary>
    <remarks>
            This class is immutable such that instances can be accessed by multiple threads at the same time.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SingletonDependencyResolver (T singletonInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T singletonInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (singletonInstance As T)" />
      <MemberSignature Language="F#" Value="new System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver&lt;'T (requires 'T : null)&gt; : 'T -&gt; System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver&lt;'T (requires 'T : null)&gt;" Usage="new System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver&lt;'T (requires 'T : null)&gt; singletonInstance" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="singletonInstance" Type="T" />
      </Parameters>
      <Docs>
        <param name="singletonInstance"> The instance to return. </param>
        <summary>
            Constructs a new resolver that will return the given instance for the contract type
            regardless of the key passed to the Get method.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SingletonDependencyResolver (T singletonInstance, Func&lt;object,bool&gt; keyPredicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T singletonInstance, class System.Func`2&lt;object, bool&gt; keyPredicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Func{System.Object,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (singletonInstance As T, keyPredicate As Func(Of Object, Boolean))" />
      <MemberSignature Language="F#" Value="new System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver&lt;'T (requires 'T : null)&gt; : 'T * Func&lt;obj, bool&gt; -&gt; System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver&lt;'T (requires 'T : null)&gt;" Usage="new System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver&lt;'T (requires 'T : null)&gt; (singletonInstance, keyPredicate)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="singletonInstance" Type="T" />
        <Parameter Name="keyPredicate" Type="System.Func&lt;System.Object,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="singletonInstance"> The instance to return. </param>
        <param name="keyPredicate"> A predicate that takes the key object and returns true if and only if it matches. </param>
        <summary>
            Constructs a new resolver that will return the given instance for the contract type
            if the given key matches the key passed to the Get method based on the given predicate.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SingletonDependencyResolver (T singletonInstance, object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T singletonInstance, object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (singletonInstance As T, key As Object)" />
      <MemberSignature Language="F#" Value="new System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver&lt;'T (requires 'T : null)&gt; : 'T * obj -&gt; System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver&lt;'T (requires 'T : null)&gt;" Usage="new System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver&lt;'T (requires 'T : null)&gt; (singletonInstance, key)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="singletonInstance" Type="T" />
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="singletonInstance"> The instance to return. </param>
        <param name="key"> Optionally, the key of the dependency to be resolved. This may be null for dependencies that are not differentiated by key. </param>
        <summary>
            Constructs a new resolver that will return the given instance for the contract type
            if the given key matches exactly the key passed to the Get method.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object GetService (Type type, object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type type, object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetService(System.Type,System.Object)" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type * obj -&gt; obj&#xA;override this.GetService : Type * obj -&gt; obj" Usage="singletonDependencyResolver.GetService (type, key)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetServices">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;object&gt; GetServices (Type type, object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; GetServices(class System.Type type, object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetServices(System.Type,System.Object)" />
      <MemberSignature Language="F#" Value="abstract member GetServices : Type * obj -&gt; seq&lt;obj&gt;&#xA;override this.GetServices : Type * obj -&gt; seq&lt;obj&gt;" Usage="singletonDependencyResolver.GetServices (type, key)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>