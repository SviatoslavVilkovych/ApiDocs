<Type Name="IDbDependencyResolver" FullName="System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver">
  <TypeSignature Language="C#" Value="public interface IDbDependencyResolver" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDbDependencyResolver" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDbDependencyResolver" />
  <TypeSignature Language="F#" Value="type IDbDependencyResolver = interface" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            This interface is implemented by any object that can resolve a dependency, either directly
            or through use of an external container.
            </summary>
    <remarks>
            The public services currently resolved using IDbDependencyResolver are documented here:
            http://msdn.microsoft.com/en-us/data/jj680697
            </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object GetService (Type type, object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type type, object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type * obj -&gt; obj" Usage="iDbDependencyResolver.GetService (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type"> The interface or abstract base class that defines the dependency to be resolved. The returned object is expected to be an instance of this type. </param>
        <param name="key"> Optionally, the key of the dependency to be resolved. This may be null for dependencies that are not differentiated by key. </param>
        <summary>
            Attempts to resolve a dependency for a given contract type and optionally a given key.
            If the resolver cannot resolve the dependency then it must return null and not throw. This
            allows resolvers to be used in a Chain of Responsibility pattern such that multiple resolvers
            can be asked to resolve a dependency until one finally does.
            </summary>
        <returns> The resolved dependency, which must be an instance of the given contract type, or null if the dependency could not be resolved. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServices">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;object&gt; GetServices (Type type, object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; GetServices(class System.Type type, object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" />
      <MemberSignature Language="F#" Value="abstract member GetServices : Type * obj -&gt; seq&lt;obj&gt;" Usage="iDbDependencyResolver.GetServices (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type"> The interface or abstract base class that defines the dependency to be resolved. Every returned object is expected to be an instance of this type. </param>
        <param name="key"> Optionally, the key of the dependency to be resolved. This may be null for dependencies that are not differentiated by key. </param>
        <summary>
            Attempts to resolve a dependencies for a given contract type and optionally a given key.
            If the resolver cannot resolve the dependency then it must return an empty enumeration and
            not throw. This method differs from <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> in that it returns all registered
            services for the given type and key combination.
            </summary>
        <returns> All services that resolve the dependency, which must be instances of the given contract type, or an empty enumeration if the dependency could not be resolved. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>