<Type Name="ExecutionStrategyResolver&lt;T&gt;" FullName="System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver&lt;T&gt;">
  <TypeSignature Language="C#" Value="public class ExecutionStrategyResolver&lt;T&gt; : System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver where T : IDbExecutionStrategy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExecutionStrategyResolver`1&lt;(class System.Data.Entity.Infrastructure.IDbExecutionStrategy) T&gt; extends System.Object implements class System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ExecutionStrategyResolver(Of T)&#xA;Implements IDbDependencyResolver" />
  <TypeSignature Language="F#" Value="type ExecutionStrategyResolver&lt;'T (requires 'T :&gt; IDbExecutionStrategy)&gt; = class&#xA;    interface IDbDependencyResolver" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <InterfaceName>System.Data.Entity.Infrastructure.IDbExecutionStrategy</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">The type of execution strategy that is resolved.</typeparam>
    <summary>
            An <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> implementation used for resolving <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />
            factories.
            </summary>
    <remarks>
            This class can be used by <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> to aid in the resolving
            of <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> factories as a default service for the provider.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExecutionStrategyResolver (string providerInvariantName, string serverName, Func&lt;T&gt; getExecutionStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string providerInvariantName, string serverName, class System.Func`1&lt;!T&gt; getExecutionStrategy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.#ctor(System.String,System.String,System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (providerInvariantName As String, serverName As String, getExecutionStrategy As Func(Of T))" />
      <MemberSignature Language="F#" Value="new System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver&lt;'T (requires 'T :&gt; System.Data.Entity.Infrastructure.IDbExecutionStrategy)&gt; : string * string * Func&lt;'T (requires 'T :&gt; System.Data.Entity.Infrastructure.IDbExecutionStrategy)&gt; -&gt; System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver&lt;'T (requires 'T :&gt; System.Data.Entity.Infrastructure.IDbExecutionStrategy)&gt;" Usage="new System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver&lt;'T (requires 'T :&gt; System.Data.Entity.Infrastructure.IDbExecutionStrategy)&gt; (providerInvariantName, serverName, getExecutionStrategy)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="providerInvariantName" Type="System.String" />
        <Parameter Name="serverName" Type="System.String" />
        <Parameter Name="getExecutionStrategy" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="providerInvariantName">
            The ADO.NET provider invariant name indicating the type of ADO.NET connection for which this execution strategy will be used.
            </param>
        <param name="serverName">
            A string that will be matched against the server name in the connection string. <c>null</c> will match anything.
            </param>
        <param name="getExecutionStrategy">A function that returns a new instance of an execution strategy.</param>
        <summary>
            Initializes a new instance of <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object GetService (Type type, object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type type, object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetService(System.Type,System.Object)" />
      <MemberSignature Language="F#" Value="abstract member GetService : Type * obj -&gt; obj&#xA;override this.GetService : Type * obj -&gt; obj" Usage="executionStrategyResolver.GetService (type, key)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type">The service type to resolve.</param>
        <param name="key">A key used to make a determination of the service to return.</param>
        <summary>
            If the given type is <see cref="T:System.Func`1" />, then this resolver will attempt
            to return the service to use, otherwise it will return null. When the given type is
            Func{IExecutionStrategy}, then the key is expected to be an <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.
            </summary>
        <returns>
            An <see cref="T:System.Func`1" />, or null.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServices">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;object&gt; GetServices (Type type, object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; GetServices(class System.Type type, object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetServices(System.Type,System.Object)" />
      <MemberSignature Language="F#" Value="abstract member GetServices : Type * obj -&gt; seq&lt;obj&gt;&#xA;override this.GetServices : Type * obj -&gt; seq&lt;obj&gt;" Usage="executionStrategyResolver.GetServices (type, key)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type">The service type to resolve.</param>
        <param name="key">A key used to make a determination of the service to return.</param>
        <summary>
            If the given type is <see cref="T:System.Func`1" />, then this resolver will attempt
            to return the service to use, otherwise it will return an empty enumeration. When the given type is
            Func{IExecutionStrategy}, then the key is expected to be an <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.
            </summary>
        <returns>
            An enumerable of <see cref="T:System.Func`1" />, or an empty enumeration.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>