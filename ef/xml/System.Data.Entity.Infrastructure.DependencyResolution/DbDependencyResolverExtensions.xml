<Type Name="DbDependencyResolverExtensions" FullName="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions">
  <TypeSignature Language="C#" Value="public static class DbDependencyResolverExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DbDependencyResolverExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module DbDependencyResolverExtensions" />
  <TypeSignature Language="F#" Value="type DbDependencyResolverExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>EntityFramework</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extension methods to call the <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> method using
            a generic type parameter and/or no name.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public static object GetService (this System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetService(class System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)" />
      <MemberSignature Language="F#" Value="static member GetService : System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver * Type -&gt; obj" Usage="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService (resolver, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolver" Type="System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" RefType="this" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="resolver"> The resolver to use. </param>
        <param name="type"> The contract type to resolve. </param>
        <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> passing the given type argument and using
            null for the name argument.
            </summary>
        <returns> The resolved dependency, or null if the resolver could not resolve it. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetService&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GetService&lt;T&gt; (this System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetService&lt;T&gt;(class System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetService(Of T) (resolver As IDbDependencyResolver) As T" />
      <MemberSignature Language="F#" Value="static member GetService : System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver -&gt; 'T" Usage="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService resolver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="resolver" Type="System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"> The contract type to resolve. </typeparam>
        <param name="resolver"> The resolver to use. </param>
        <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> passing the generic type of the method as
            the type argument and null for the name argument.
            </summary>
        <returns> The resolved dependency, or null if the resolver could not resolve it. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetService&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GetService&lt;T&gt; (this System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver, object key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetService&lt;T&gt;(class System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver, object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetService(Of T) (resolver As IDbDependencyResolver, key As Object) As T" />
      <MemberSignature Language="F#" Value="static member GetService : System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver * obj -&gt; 'T" Usage="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService (resolver, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="resolver" Type="System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" RefType="this" />
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="T"> The contract type to resolve. </typeparam>
        <param name="resolver"> The resolver to use. </param>
        <param name="key"> The key of the dependency to resolve. </param>
        <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> passing the generic type of the method and the given
            name as arguments.
            </summary>
        <returns> The resolved dependency, or null if the resolver could not resolve it. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServices">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;object&gt; GetServices (this System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;object&gt; GetServices(class System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)" />
      <MemberSignature Language="F#" Value="static member GetServices : System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver * Type -&gt; seq&lt;obj&gt;" Usage="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices (resolver, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolver" Type="System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" RefType="this" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="resolver"> The resolver to use. </param>
        <param name="type"> The contract type to resolve. </param>
        <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" /> passing the given type argument and using
            null for the name argument.
            </summary>
        <returns> All resolved dependencies, or an <see cref="T:System.Collections.Generic.IEnumerable`1" /> if no services are resolved.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServices&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; GetServices&lt;T&gt; (this System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetServices&lt;T&gt;(class System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetServices(Of T) (resolver As IDbDependencyResolver) As IEnumerable(Of T)" />
      <MemberSignature Language="F#" Value="static member GetServices : System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver -&gt; seq&lt;'T&gt;" Usage="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices resolver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="resolver" Type="System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T"> The contract type to resolve. </typeparam>
        <param name="resolver"> The resolver to use. </param>
        <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" /> passing the generic type of the method as
            the type argument and null for the name argument.
            </summary>
        <returns> All resolved dependencies, or an <see cref="T:System.Collections.Generic.IEnumerable`1" /> if no services are resolved.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServices&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; GetServices&lt;T&gt; (this System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver, object key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetServices&lt;T&gt;(class System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver resolver, object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetServices(Of T) (resolver As IDbDependencyResolver, key As Object) As IEnumerable(Of T)" />
      <MemberSignature Language="F#" Value="static member GetServices : System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver * obj -&gt; seq&lt;'T&gt;" Usage="System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices (resolver, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>EntityFramework</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="resolver" Type="System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" RefType="this" />
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="T"> The contract type to resolve. </typeparam>
        <param name="resolver"> The resolver to use. </param>
        <param name="key"> The key of the dependency to resolve. </param>
        <summary>
            Calls <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" /> passing the generic type of the method and the given
            name as arguments.
            </summary>
        <returns> All resolved dependencies, or an <see cref="T:System.Collections.Generic.IEnumerable`1" /> if no services are resolved.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>